(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{940:function(e,t,n){"use strict";n.r(t);var a=n(43),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"introduction"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#introduction"}},[e._v("#")]),e._v(" Introduction")]),e._v(" "),n("p",[e._v("This document describes the requirements for changes to the functionality of the\nOSS Mojaloop switch to support:")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("The immediate requirement for Mowali of being able to settle according to\ndifferent timetables for different currencies.")])]),e._v(" "),n("li",[n("p",[e._v("The requirement for TIPS to be able to settle gross via a pooled account.")])]),e._v(" "),n("li",[n("p",[e._v("The requirement for TIPS to use the settlement process for interchange fees.")])]),e._v(" "),n("li",[n("p",[e._v("The requirement for Mojaloop to support the evolving Settlement API")])])]),e._v(" "),n("h1",{attrs:{id:"references"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[e._v("#")]),e._v(" References")]),e._v(" "),n("p",[e._v("The following external references are used in this document:")]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",{staticStyle:{"text-align":"left"}},[e._v("Reference")]),e._v(" "),n("th",{staticStyle:{"text-align":"left"}},[e._v("Document")])])]),e._v(" "),n("tbody",[n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("sup",[e._v("1")])]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[n("a",{attrs:{href:"http://mojaloop.io/mojaloop-specification/documents/API%20Definition%20v1.0.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Open API for FSP Interoperability Specification"),n("OutboundLink")],1)])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("sup",[e._v("2")])]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[n("a",{attrs:{href:"https://github.com/mojaloop/central-settlement/blob/master/src/interface/swagger.json",target:"_blank",rel:"noopener noreferrer"}},[e._v("Settlement API Interface Definition"),n("OutboundLink")],1)])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("sup",[e._v("3")])]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[n("a",{attrs:{href:"https://mojaloop.io/documentation/api/central-ledger-api-specification.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Current administration API definition"),n("OutboundLink")],1)])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}}),e._v(" "),n("td",{staticStyle:{"text-align":"left"}})])])]),e._v(" "),n("h1",{attrs:{id:"versions"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#versions"}},[e._v("#")]),e._v(" Versions")]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",{staticStyle:{"text-align":"left"}},[e._v("Version")]),e._v(" "),n("th",{staticStyle:{"text-align":"left"}},[e._v("Description")]),e._v(" "),n("th",{staticStyle:{"text-align":"left"}},[e._v("Author")]),e._v(" "),n("th",{staticStyle:{"text-align":"left"}},[e._v("Date")]),e._v(" "),n("th",{staticStyle:{"text-align":"left"}},[e._v("Changes tracked")])])]),e._v(" "),n("tbody",[n("tr",[n("td",{staticStyle:{"text-align":"left"}},[e._v("1.0")]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[e._v("Baseline version")]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[e._v("Michael Richards")]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[e._v("2 Dec 2019")]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[e._v("No")])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}}),e._v(" "),n("td",{staticStyle:{"text-align":"left"}}),e._v(" "),n("td",{staticStyle:{"text-align":"left"}}),e._v(" "),n("td",{staticStyle:{"text-align":"left"}}),e._v(" "),n("td",{staticStyle:{"text-align":"left"}})])])]),e._v(" "),n("h1",{attrs:{id:"definition-of-terms"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#definition-of-terms"}},[e._v("#")]),e._v(" Definition of terms")]),e._v(" "),n("h2",{attrs:{id:"settlement-model"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#settlement-model"}},[e._v("#")]),e._v(" Settlement model")]),e._v(" "),n("p",[e._v("A settlement model defines a kind of settlement within the scheme. Settlement\nmodels can be defined by scheme administrators, and have the following\ncharacteristics:")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("They can support settlement either gross or net settlements. If gross, then\na settlement is executed after each transfer is completed. If net, a group\nof transfers is settled together.")])]),e._v(" "),n("li",[n("p",[e._v("They can support either multilateral or bilateral settlements. If\nsettlements are multilateral, each participant settles with the scheme for\nthe net of its transfers which are included in the settlement. If they are\nmultilateral, each participant settles separately with each of the other\nparticipants and the scheme is not a party to the settlement.")])]),e._v(" "),n("li",[n("p",[e._v("They can support either deferred or immediate settlements. If settlements\nare immediate, they are actioned immediately they are completed. If they are\ndeferred, they are actioned after a period of delay.")])]),e._v(" "),n("li",[n("p",[e._v("They can support continuous or discontinuous settlements. Discontinuous\nsettlements require a formal approval from a resource outside the system to\nconfirm that they have been completed. Continuous settlements can be\napproved from within the switch, provided that the criteria for approval are\nmet.")])]),e._v(" "),n("li",[n("p",[e._v("They can require liquidity support or not.")])])]),e._v(" "),n("h2",{attrs:{id:"ledger-account-type"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ledger-account-type"}},[e._v("#")]),e._v(" Ledger account type")]),e._v(" "),n("p",[e._v("A ledger account type defines a type of internal account. Current values are:")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("POSITION. Accounts of this type are used for provisioning transfers")])]),e._v(" "),n("li",[n("p",[e._v("SETTLEMENT. Accounts of this type are intended to be reflections of\nSettlement Accounts held at the Settlement Bank")])]),e._v(" "),n("li",[n("p",[e._v("HUB_RECONCILIATION. Each implementation of the switch has one account of\nthis type for each currency supported by the switch, owned by the virtual\nDFSP which represents the Hub in the implementation. The account is used\nduring FUNDS IN/OUT operations to represent movements in participants’\nSETTLEMENT accounts.")])]),e._v(" "),n("li",[n("p",[e._v("HUB_MULTILATERAL_SETTLEMENT. Each implementation of the switch has one\naccount of this type for each currency supported by the switch, owned by the\nvirtual DFSP which represents the Hub in the implementation. This account\ntype is used to record counterparty information for net amounts paid to or\nfrom participants as part of settlements. Entries in this account represent\nbalancing values corresponding with the net value in a participant’s\nPOSITION account for a given settlement.")])]),e._v(" "),n("li",[n("p",[e._v("HUB_FEE. Accounts of this type represent accounts into which fees are\ncollected, or from which they are disbursed. (Not implemented)")])])]),e._v(" "),n("h2",{attrs:{id:"ledger-entry-type"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ledger-entry-type"}},[e._v("#")]),e._v(" Ledger entry type")]),e._v(" "),n("p",[e._v("A ledger entry type categorises the type of funds which are the content of a\ntransfer and which are due to or from a participant as a consequence of that\ntransfer. The current values are:")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("PRINCIPLE_VALUE. This designates the funds moved as the content of a\ntransfer in the Interoperability API Specification sense of that term (i.e.\nthe "),n("strong",[e._v("amount.amount")]),e._v(" item in the "),n("strong",[e._v("Transaction")]),e._v(" object described in\n"),n("a",{attrs:{href:"https://mojaloop.io/mojaloop-specification/documents/API%20Definition%20v1.0.html#7317-ilpcondition",target:"_blank",rel:"noopener noreferrer"}},[e._v("Section 7.4.17"),n("OutboundLink")],1),e._v(" of the Interoperability API specification"),n("sub",[n("a",{attrs:{href:"https://mojaloop.io/mojaloop-specification/documents/API%20Definition%20v1.0.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("1"),n("OutboundLink")],1),e._v(".) It should be\nspelt “principal.”")])])]),e._v(" "),n("li",[n("p",[e._v("INTERCHANGE_FEE. This designates fees paid between participants in the\nsystem. (Not implemented)")])]),e._v(" "),n("li",[n("p",[e._v("HUB_FEE. This designates fees paid between participants and the scheme. (Not\nimplemented)")])]),e._v(" "),n("li",[n("p",[e._v("POSITION_DEPOSIT. This is used to designate funds transfers which are\nintended to increase the value of the position in a particular ledger\naccount. (Not implemented)")])]),e._v(" "),n("li",[n("p",[e._v("POSITION_WITHDRAWAL. This is used to designate funds transfers which are\nintended to reduce the value of the position in a particular ledger account.\n(Not implemented)")])]),e._v(" "),n("li",[n("p",[e._v("SETTLEMENT_NET_RECIPIENT. This is used to designate funds which a\nparticipant is owed by the counterparty as part of a settlement (in a\nmultilateral settlement model, the counterparty will be the hub; in a\nbilateral settlement model, it will be another party.)")])]),e._v(" "),n("li",[n("p",[e._v("SETTLEMENT_NET_SENDER. This is used to designate funds which a participant\nowes to the counterparty as part of a settlement (in a multilateral\nsettlement model, the counterparty will be the hub; in a bilateral\nsettlement model, it will be another party.)")])]),e._v(" "),n("li",[n("p",[e._v("SETTLEMENT_NET_ZERO. This is used to generate formal records where a\nparticipant’s net position in a settlement is zero.")])]),e._v(" "),n("li",[n("p",[e._v("RECORD_FUNDS_IN. This is used to record funds deposited by a participant to\nthe SETTLEMENT account.")])]),e._v(" "),n("li",[n("p",[e._v("RECORD_FUNDS_OUT. This is used to record funds withdrawn by a participant\nfrom the SETTLEMENT account.")])])]),e._v(" "),n("p",[e._v("The last seven of these types relate to the internal structure of the switch and\nshould be neither visible to nor modifiable by a scheme. The first three fall\ninto a category which is expected to be extensible by the scheme. The table does\nnot currently have an indicator to mark this distinction, but one is proposed in\nSection TODO.")]),e._v(" "),n("h2",{attrs:{id:"participant-role-types"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#participant-role-types"}},[e._v("#")]),e._v(" Participant role types")]),e._v(" "),n("p",[e._v("A participant role type defines the role that a particular participant is\nplaying in a given transaction. The current values of this table are:")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("PAYER_DFSP. The participant is the debtor in a transfer.")])]),e._v(" "),n("li",[n("p",[e._v("PAYEE_DFSP. The participant is a creditor in a transfer.")])]),e._v(" "),n("li",[n("p",[e._v("HUB. The participant is representing the scheme, and may be either the\ncreditor or the debtor in a transaction.")])]),e._v(" "),n("li",[n("p",[e._v("DFSP_SETTLEMENT. The participant represents the settlement account of a\nparticipant in the scheme. It may be either the creditor or the debtor in a\ntransaction. It is used during FUNDS IN/OUT operations. This is used for\nentries whose counterparty is an entry in the HUB account.")])]),e._v(" "),n("li",[n("p",[e._v("DFSP_POSITION. The participant represents the position of a participant in\nthe scheme. It may be either the creditor or the debtor in a transaction. It\nis used during the settlement process. This is used for entries whose\ncounterparty is an entry in the HUB account.")])])]),e._v(" "),n("h2",{attrs:{id:"settlement-states"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#settlement-states"}},[e._v("#")]),e._v(" Settlement states")]),e._v(" "),n("p",[e._v("A settlement may be in a number of possible states. The states currently\nsupported are:")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("PENDING_SETTLEMENT. A new settlement consisting of one or more settlement\nwindows has been created. The net amounts due to or from each participant\nhave been calculated and a report detailing these net amounts has been\nproduced.")])]),e._v(" "),n("li",[n("p",[e._v("PS_TRANSFERS_RECORDED: all the calculated net amounts for the settlement\nhave been converted into transfers between the creditor and debtor accounts.\nIt is applied for each settlement entry and at settlement level, when all\nentries are recorded. This state is not applied to settlement windows.")])]),e._v(" "),n("li",[n("p",[e._v("PS_TRANSFERS_RESERVED: all the funds required for settlement have been\nreserved (debit amounts only.) It is applied for each settlement entry and\nat settlement level, when all entries are reserved.")])]),e._v(" "),n("li",[n("p",[e._v("PS_TRANSFERS_COMMITTED: all the credit amounts required as part of the\nsettlement have been committed. It is applied for each settlement entry and\nat settlement level, when all entries are committed.")])]),e._v(" "),n("li",[n("p",[e._v("SETTLING: It is used only at settlement level if all accounts are not yet\nsettled.")])]),e._v(" "),n("li",[n("p",[e._v("SETTLED: This state is applied to settlement accounts in\nPS_TRANSFERS_COMMITTED state. When applied to even one account, the\nsettlement will transit to SETTLING state. When all accounts in a window are\nSETTLED, the settlement window will change from PENDING_SETTLEMENT to\nSETTLED, while the settlement is still in SETTLING state. When all accounts\nfrom all windows are SETTLED, the settlement will be changed to SETTLED. It\nis possible for a settlement to change directly from PS_TRANSFERS_COMMITTED\nto SETTLED if all accounts are settled with one request.")])]),e._v(" "),n("li",[n("p",[e._v("ABORTED: the settlement could not be completed and should be rolled back. It\nis currently only possible to abort a settlement if the state is one of:\nPENDING_SETTLEMENT, PS_TRANSFERS_RECORDED or PS_TRANSFERS_RESERVED. After\nhaving even one account in PS_TRANSFERS_COMMITTED state (even if the\nsettlement as a whole is still in PS_TRANSFERS_RESERVED), a request to abort\nthe settlement is rejected. It should be noted that this prevents abortion\nin cases such as the default of a participant midway through the settlement\nprocess.")])])]),e._v(" "),n("p",[e._v("The present data model contains a foreign key to the enumeration table\ncontaining settlement states from the\n"),n("strong",[e._v("settlementParticipantCurrencyStateChange")]),e._v(" table, which maps onto a table\nwhich contains a record for each participant/currency/account type combination.")]),e._v(" "),n("p",[e._v("Assumption: this means that the states appropriate to a settlement are also to\nbe applied to the individual elements of a settlement. As a consequence, the\ndescriptions should be taken to refer to individual settlement amounts as well\nas to the settlement as a whole.")]),e._v(" "),n("h2",{attrs:{id:"settlement-window-states"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#settlement-window-states"}},[e._v("#")]),e._v(" Settlement window states")]),e._v(" "),n("p",[e._v("A settlement is made up of one or more settlement windows. Each settlement\nwindow has a state associated with it. The current values of this table are as\nfollows:")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("OPEN: the settlement window can have ledger movements added to it.")])]),e._v(" "),n("li",[n("p",[e._v("CLOSED: the settlement window cannot have any additional ledger movements\nadded to it. It is available for settlement.")])]),e._v(" "),n("li",[n("p",[e._v("PENDING_SETTLEMENT: the settlement window’s contents have been included in a\nsettlement request, but this request is a request for deferred settlement\nwhich has not yet been completed.")])]),e._v(" "),n("li",[n("p",[e._v("SETTLED: the scheme has confirmed that the obligations incurred by\nparticipants as a consequence of the settlement to which this settlement\nwindow belongs have been met by those participants and the settlement is\ntherefore complete.")])]),e._v(" "),n("li",[n("p",[e._v("ABORTED: the settlement to which this settlement window belongs did not\ncomplete. The settlement window is available to be included in another\nsettlement.")])])]),e._v(" "),n("h2",{attrs:{id:"transfer-states"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#transfer-states"}},[e._v("#")]),e._v(" Transfer states")]),e._v(" "),n("p",[e._v("Each transaction which passes through the system can be assigned one of a fixed\nnumber of states. The current values of this state are:")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("RECEIVED_PREPARE: the switch has received the transaction request.")])]),e._v(" "),n("li",[n("p",[e._v("RESERVED: the switch has reserved the funds required to cover the\ntransaction.")])]),e._v(" "),n("li",[n("p",[e._v("RECEIVED_FULFIL: the switch has received the fulfilment request, and the\ntransaction has been assigned to a settlement window")])]),e._v(" "),n("li",[n("p",[e._v("COMMITTED: the transaction has been committed.")])]),e._v(" "),n("li",[n("p",[e._v("FAILED: the transaction has failed in some unspecified way and has been\naborted. (Not implemented)")])]),e._v(" "),n("li",[n("p",[e._v("RESERVED_TIMEOUT: the transaction has timed out while in the reserved state\nand has been aborted.")])]),e._v(" "),n("li",[n("p",[e._v("RECEIVED_REJECT: the transaction has been rejected by the payee DFSP and\nshould be aborted.")])]),e._v(" "),n("li",[n("p",[e._v("ABORTED_REJECTED: the transaction has been aborted by the switch as a\nconsequence of its having been rejected by the payee DFSP.")])]),e._v(" "),n("li",[n("p",[e._v("RECEIVED_ERROR: the transaction was not received correctly by the payee DFSP\nand should be aborted.")])]),e._v(" "),n("li",[n("p",[e._v("ABORTED_ERROR: the transaction has been aborted by the switch as a\nconsequence of its not having been received correctly.")])]),e._v(" "),n("li",[n("p",[e._v("EXPIRED_PREPARED: the transaction has expired during the prepare process and\nhas been aborted.")])]),e._v(" "),n("li",[n("p",[e._v("EXPIRED_RESERVED: the transaction has timed out during the reservation\nprocess and has been aborted.")])]),e._v(" "),n("li",[n("p",[e._v("INVALID: the transaction has failed the switch’s internal validation process\nand has been aborted.")])])]),e._v(" "),n("h2",{attrs:{id:"transfers-and-transactions"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#transfers-and-transactions"}},[e._v("#")]),e._v(" Transfers and transactions")]),e._v(" "),n("p",[e._v("Transfers define a movement of funds in the system. There is a table in the\nswitch which has this name. Some entries in this table are the consequence of\nexternal movements which are generated by scheme participants and processed by\nthe switch; others are internally generated by the switch (e.g. to record net\nmovements of funds associated with settlements.)")]),e._v(" "),n("p",[e._v("It may be a source of confusion that, although “transfers” is a term used e.g.\nin the Interoperability API specification to designate the movement of funds\nbetween participants, it is used as the name of a table in the switch which\nstores other types of funds movement as well.")]),e._v(" "),n("p",[e._v("This document will therefore adopt the following convention:")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("“Transfers” refers to the content of instructions issued using the\n"),n("strong",[e._v("/transfers")]),e._v(" resource of the Interoperability API definition"),n("sup",[n("a",{attrs:{href:"http://mojaloop.io/mojaloop-specification/documents/API%20Definition%20v1.0.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("1"),n("OutboundLink")],1)]),e._v(". (see "),n("a",{attrs:{href:"http://mojaloop.io/mojaloop-specification/documents/API%20Definition%20v1.0.html#67-api-resource-transfers",target:"_blank",rel:"noopener noreferrer"}},[e._v("Section 6.7"),n("OutboundLink")],1),e._v(" of the Interoperability API definition"),n("sup",[n("a",{attrs:{href:"http://mojaloop.io/mojaloop-specification/documents/API%20Definition%20v1.0.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("1"),n("OutboundLink")],1)]),e._v(".)")])]),e._v(" "),n("li",[n("p",[e._v("“Transactions” refers to all movements of funds which are tracked by the\nswitch.")])])]),e._v(" "),n("h1",{attrs:{id:"in-scope-and-out-of-scope"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#in-scope-and-out-of-scope"}},[e._v("#")]),e._v(" In scope and out of scope")]),e._v(" "),n("h2",{attrs:{id:"in-scope"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#in-scope"}},[e._v("#")]),e._v(" In scope")]),e._v(" "),n("p",[e._v("The following functional items are in scope:")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("Requesting a settlement by currency")])]),e._v(" "),n("li",[n("p",[e._v("Requesting a settlement by currency and settlement model")])])]),e._v(" "),n("h2",{attrs:{id:"out-of-scope"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#out-of-scope"}},[e._v("#")]),e._v(" Out of scope")]),e._v(" "),n("h1",{attrs:{id:"business-rules"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#business-rules"}},[e._v("#")]),e._v(" Business rules")]),e._v(" "),n("h2",{attrs:{id:"how-do-things-happen-now"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#how-do-things-happen-now"}},[e._v("#")]),e._v(" How do things happen now?")]),e._v(" "),n("p",[e._v("This section describes how the current settlement process works.")]),e._v(" "),n("h3",{attrs:{id:"categorisation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#categorisation"}},[e._v("#")]),e._v(" Categorisation")]),e._v(" "),n("p",[e._v("The process leading to settlement is initially defined by entries in the\n"),n("em",[e._v("participantCurrency")]),e._v(" table. This table holds a record for each combination of:")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("Participant")])]),e._v(" "),n("li",[n("p",[e._v("Currency")])]),e._v(" "),n("li",[n("p",[e._v("Ledger account type (see Section 2.2 above.)")])])]),e._v(" "),n("h3",{attrs:{id:"recording-positions"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#recording-positions"}},[e._v("#")]),e._v(" Recording positions")]),e._v(" "),n("p",[e._v("Each entry in this table has a corresponding entry in the "),n("em",[e._v("participantPosition")]),e._v("\ntable. This table stores the current committed and reserved positions for each\nof the combinations described above. Each change to the positions in this table\nis documented by an entry in the "),n("em",[e._v("participantPositionChange")]),e._v(" table, which refers\nthe change back to the "),n("em",[e._v("transfer")]),e._v(" table and thence to the authoritative record\nof transactions.")]),e._v(" "),n("h3",{attrs:{id:"assigning-transactions-to-settlement-windows"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#assigning-transactions-to-settlement-windows"}},[e._v("#")]),e._v(" Assigning transactions to settlement windows")]),e._v(" "),n("p",[e._v("As each transfer is fulfilled, a record is created for it in the\n"),n("strong",[e._v("transferFulfilment")]),e._v(" table. This record contains a link to the currently open\nsettlement window.")]),e._v(" "),n("p",[e._v("Records may be created for transactions which are not transfers. Non-transfer\ntransactions have their ilpFulfilment set to 0.")]),e._v(" "),n("p",[e._v("The settlement API "),n("sup",[n("a",{attrs:{href:"https://github.com/mojaloop/central-settlement/blob/master/src/interface/swagger.json",target:"_blank",rel:"noopener noreferrer"}},[e._v("2"),n("OutboundLink")],1)]),e._v(" contains a resource\n("),n("strong",[e._v("closeSettlementWindow")]),e._v(") to allow an administrator to close a settlement\nwindow and create a new one. The resource takes a settlement window ID as part\nof the query string, together with a string describing the status to be assigned\nand a string describing the reason for the change of status. In-line\ndocumentation for the resource states: “If the settlementWindow is open, it can\nbe closed and a new window is created. If it is already closed, return an error\nmessage. Returns the new settlement window.”")]),e._v(" "),n("p",[e._v("Settlement windows can only be passed a status of CLOSED using this resource.")]),e._v(" "),n("h3",{attrs:{id:"initiating-a-settlement"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#initiating-a-settlement"}},[e._v("#")]),e._v(" Initiating a settlement")]),e._v(" "),n("p",[e._v("The initiation of a settlement is initiated by making a call triggered by the\nscheme making a "),n("strong",[e._v("POST")]),e._v(" to the "),n("strong",[e._v("/settlements")]),e._v(" resource in the settlement API.\nThe caller gives a reason for the settlement request. This is a synchronous\ncall, whose return is described in Section 4.1.5 below. Internally, the\ninitiation is marked by the creation of a record in the "),n("strong",[e._v("settlement")]),e._v(" table and\nthe association of a number of settlement window records in the\n"),n("strong",[e._v("settlementWindow")]),e._v(" table with the settlement created. This says: I want this\nsettlement to contain these settlement windows. Each of the settlement windows\nselected to form part of this settlement must have the status CLOSED or ABORTED.\nWhen selected to form part of a settlement, the status of each window should be\nchanged to PENDING_SETTLEMENT. The status of the settlement itself should also\nbe set to PENDING_SETTLEMENT.")]),e._v(" "),n("h3",{attrs:{id:"calculating-the-content-of-a-settlement"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#calculating-the-content-of-a-settlement"}},[e._v("#")]),e._v(" Calculating the content of a settlement")]),e._v(" "),n("p",[e._v("When a settlement has been requested and the windows which it will contain have\nbeen selected, the switch produces an aggregation of the content of the proposed\nsettlement at the following levels:")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("Settlement window (from "),n("strong",[e._v("settlementWindow")]),e._v(")")])]),e._v(" "),n("li",[n("p",[e._v("Participant (from "),n("strong",[e._v("participantCurrency")]),e._v(")")])]),e._v(" "),n("li",[n("p",[e._v("Currency (from "),n("strong",[e._v("participantCurrency")]),e._v(")")])]),e._v(" "),n("li",[n("p",[e._v("Account type (from "),n("strong",[e._v("participantCurrency")]),e._v(")")])]),e._v(" "),n("li",[n("p",[e._v("Participant role type (from "),n("strong",[e._v("transferParticipant")]),e._v(")")])]),e._v(" "),n("li",[n("p",[e._v("Ledger entry type (from "),n("strong",[e._v("transferParticipant")]),e._v(")")])])]),e._v(" "),n("p",[e._v("This query can be provisioned from the database FK links from "),n("strong",[e._v("settlement")]),e._v(" to\n"),n("strong",[e._v("settlementwindow")]),e._v(", to "),n("strong",[e._v("transferFulfilment")]),e._v(" (all fulfilled transfers), to\n"),n("strong",[e._v("transfer")]),e._v(", to "),n("strong",[e._v("transferParticipant")]),e._v(". The amount is taken from the\n"),n("strong",[e._v("transferParticipant")]),e._v(" table. Correct!")]),e._v(" "),n("p",[e._v("Only transfers are included in a settlement. This is implied by the first\naggregation criterion above (Settlement window) and the fact that only transfers\nare assigned to the current OPEN window when a "),n("strong",[e._v("transferFulfilment")]),e._v(" record is\ncreated. All COMMITTED transactions should have an entry in the\n"),n("strong",[e._v("transferFulfilment")]),e._v(" table.")]),e._v(" "),n("p",[e._v("The results of this query are used to construct a number of records in the\n"),n("strong",[e._v("settlementParticipantCurrency")]),e._v(" table, representing the net amount due to or\nfrom each participant and currency in the settlement as a consequence of the\nsettlement. For a given settlement, these records are segmented by: Correct!")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("Participant (from "),n("strong",[e._v("participantCurrency")]),e._v(")")])]),e._v(" "),n("li",[n("p",[e._v("Currency (from "),n("strong",[e._v("participantCurrency")]),e._v(")")])]),e._v(" "),n("li",[n("p",[e._v("Account type (from "),n("strong",[e._v("participantCurrency)")])])])]),e._v(" "),n("p",[e._v("This report is used as the basis of the information returned from the initial\n"),n("strong",[e._v("POST")]),e._v(" to the "),n("strong",[e._v("/createSettlement")]),e._v(" resource of the settlement API (see\nSection 4.1.4 above.)")]),e._v(" "),n("p",[e._v("Bilateral settlements are not currently implemented.")]),e._v(" "),n("h3",{attrs:{id:"creating-position-records-for-the-settlement"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#creating-position-records-for-the-settlement"}},[e._v("#")]),e._v(" Creating position records for the settlement")]),e._v(" "),n("p",[e._v("A record is inserted in the "),n("strong",[e._v("transfer")]),e._v(" table for each net amount calculated in\nthe previous step when the settlement account transitions from\nPENDING_SETTLEMENT to PS_TRANSFERS_RECORDED. Please note that PS stands for\nPENDING_SETTLEMENT. Each of these records will have the account type SETTLEMENT.\nThe ledger entry type will be SETTLEMENT_NET_SENDER, SETTLEMENT_NET_RECIPIENT or\nSETTLEMENT_NET_ZERO depending on whether the participant owes money to the\nscheme, is owed money by the scheme or is neutral in the settlement,\nrespectively. The transfer participant type is HUB for the Hub participant and\nDFSP_POSITION for the DFSP participant. The account type is imposed by the\nparticipant currency – for the Hub participant it is the\nHUB_MULTILATERAL_SETTLEMENT and for the DFSP participant it is the POSITION\naccount. This enables the switch to reset the participant’s position when the\nwindow enters the PS_TRANSFERS_COMMITTED state.")]),e._v(" "),n("h3",{attrs:{id:"progress-of-the-settlement"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#progress-of-the-settlement"}},[e._v("#")]),e._v(" Progress of the settlement")]),e._v(" "),n("p",[e._v("As the scheme verifies that participants have settled the amounts due from them,\nthe scheme administrator can update the switch with this information.")]),e._v(" "),n("h4",{attrs:{id:"updating-the-status-of-settlement-windows"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#updating-the-status-of-settlement-windows"}},[e._v("#")]),e._v(" Updating the status of settlement windows")]),e._v(" "),n("p",[e._v("Three methods of performing this update are supported. Each of these methods is\ndiscussed in more detail below.")]),e._v(" "),n("h5",{attrs:{id:"updatesettlementbyid"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#updatesettlementbyid"}},[e._v("#")]),e._v(" "),n("strong",[e._v("updateSettlementById")])]),e._v(" "),n("p",[e._v("An administrator may issue a "),n("strong",[e._v("PUT")]),e._v(" to the "),n("strong",[e._v("/updateSettlementById")]),e._v(" resource\non the settlement API, giving the settlement ID of the settlement they wish to\nupdate as part of the query (e.g. "),n("strong",[e._v("PUT\n/updateSettlementById/settlements/123.")]),e._v(") The content of the request is as\nfollows:")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("A state to be assigned to the participants required. The state is\nconstrained to be either ABORTED or INVALID")])]),e._v(" "),n("li",[n("p",[e._v("A reason for the change of state.")])]),e._v(" "),n("li",[n("p",[e._v("An external reference for the change.")])]),e._v(" "),n("li",[n("p",[e._v("An array of participants to which the status is to be applied. The following\ninformation is given for each participant:")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("The ID of the participant. This is the internal Mojaloop ID of the\nparticipant.")])]),e._v(" "),n("li",[n("p",[e._v("An array of "),n("em",[e._v("accounts")]),e._v(". The content of each account is as follows:")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("An ID. The description characterises this as the participant’s\ncurrency ID QUESTION: Is this correct? It is an integer, where a\nVARCHAR(3) would be expected.")])]),e._v(" "),n("li",[n("p",[e._v("A reason. A string which presumably can contain anything.")])]),e._v(" "),n("li",[n("p",[e._v("The state of the settlement for the account. This is not constrained\nby an enum, but is a simple string. It is not clear how this status\nrelates to the overall state given in Item 1 above.")])]),e._v(" "),n("li",[n("p",[e._v("An external reference for the change in state.")])])])])])])]),e._v(" "),n("blockquote",[n("p",[e._v("A call to this API resource may contain "),n("em",[e._v("either")]),e._v(" items 1-3 above "),n("em",[e._v("or")]),e._v(" an\narray of accounts as specified in item 4 above, but not both. If it contains\nitems 1-3 above, then all the items must be present. If these rules are\nbreached, then the switch will reject the request.")])]),e._v(" "),n("h5",{attrs:{id:"updatesettlementbysettlementparticipant"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#updatesettlementbysettlementparticipant"}},[e._v("#")]),e._v(" "),n("strong",[e._v("updateSettlementBySettlementParticipant")])]),e._v(" "),n("p",[e._v("An administrator may issue a "),n("strong",[e._v("PUT")]),e._v(" to the\n"),n("strong",[e._v("/updateSettlementBySettlementParticipant")]),e._v(" resource on the settlement API,\ngiving the settlement ID and the participant ID of the parts of the settlement\nthey wish to update as part of the query (e.g. "),n("strong",[e._v("PUT\n/updateSettlementByParticipant/settlements/123/participants/56789.")]),e._v(") The\ncontent of the request is as follows:")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("An array of state changes, whose content is as follows:")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("The currency ID whose status is to be changed. This is an integer, where\na VARCHAR(3) would be expected.")])]),e._v(" "),n("li",[n("p",[e._v("A reason for the state change.")])]),e._v(" "),n("li",[n("p",[e._v("The state requested. This is a string, where an enumeration would be\nexpected.")])]),e._v(" "),n("li",[n("p",[e._v("An external reference for the change in state.")])])])])]),e._v(" "),n("p",[e._v("Note that this is an array with the same structure as that described in item 4\nof Section 5.1.7.1 above, although it is defined separately in the API\ndefinition.")]),e._v(" "),n("h5",{attrs:{id:"updatesettlementbysettlementparticipantaccount"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#updatesettlementbysettlementparticipantaccount"}},[e._v("#")]),e._v(" "),n("strong",[e._v("updateSettlementBySettlementParticipantAccount")])]),e._v(" "),n("p",[e._v("An administrator may issue a "),n("strong",[e._v("PUT")]),e._v(" to the\n"),n("strong",[e._v("/updateSettlementBySettlementParticipantAccount")]),e._v(" resource on the settlement\nAPI, giving the settlement ID, the participant ID and the account ID of the part\nof the settlement they wish to update as part of the query (e.g. "),n("strong",[e._v("PUT\n/updateSettlementByParticipant/settlements/123/participants/56789/accounts/1.")]),e._v(")\nThe content of the request is as follows:")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("The state requested. This is a string, where an enumeration would be\nexpected.")])]),e._v(" "),n("li",[n("p",[e._v("A reason. A string which presumably can contain anything.")])]),e._v(" "),n("li",[n("p",[e._v("An external reference for the change in state.")])])]),e._v(" "),n("p",[e._v("Note that this is a structure with most of the same members as the structure\ndefined in Item 1 of Section 5.1.7.2 above, although the items appear in a\ndifferent order.")]),e._v(" "),n("h4",{attrs:{id:"how-changes-in-settlement-window-state-are-processed"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#how-changes-in-settlement-window-state-are-processed"}},[e._v("#")]),e._v(" How changes in settlement window state are processed")]),e._v(" "),n("p",[e._v("The action taken in response to these calls depends on the status assigned to\nthe account. In any case, a record is created in the\n"),n("strong",[e._v("settlementParticipantCurrencyStateChange")]),e._v(" table, giving the state identifier,\nthe reason and an external reference for the change.")]),e._v(" "),n("p",[e._v("There is a sequence of steps defined for a settlement. Each step must be\nfollowed in order, and no steps may be omitted. The sequence of steps is\nhard-coded into the application and is as follows:")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("PENDING_SETTLEMENT")])]),e._v(" "),n("li",[n("p",[e._v("PS_TRANSFERS_RECORDED")])]),e._v(" "),n("li",[n("p",[e._v("PS_TRANSFERS_RESERVED")])]),e._v(" "),n("li",[n("p",[e._v("PS_TRANSFERS_COMMITTED")])]),e._v(" "),n("li",[n("p",[e._v("SETTLED")])])]),e._v(" "),n("p",[e._v("A settlement can be aborted provided no account in the settlement has reached a\nstatus of PS_TRANSFERS_COMMITTED.")]),e._v(" "),n("p",[e._v("The following actions are taken on each change of status:")]),e._v(" "),n("h5",{attrs:{id:"pending-settlement-to-ps-transfers-recorded"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#pending-settlement-to-ps-transfers-recorded"}},[e._v("#")]),e._v(" PENDING_SETTLEMENT to PS_TRANSFERS_RECORDED")]),e._v(" "),n("p",[e._v("A record is generated in the "),n("strong",[e._v("transfer")]),e._v(" table to record the change in state.\nThe parties to this transfer are the POSITION account type and the\nHUB_MULTILATERAL_SETTLEMENT type. If the participant account is a net creditor\nfor the settlement, then the ledger entry type will be set to\nSETTLEMENT_NET_RECIPIENT. If the participant account is a net debtor for the\nsettlement, then the ledger entry type will be set to SETTLEMENT_NET_SENDER. If\nthe participant account is neutral for the settlement, then the ledger entry\ntype will be set to SETTLEMENT_NET_ZERO.")]),e._v(" "),n("p",[e._v("A record is also created in the "),n("strong",[e._v("transferstatechange")]),e._v(" table with the\nRECEIVED_PREPARE state, which means that no positions have been changed.")]),e._v(" "),n("p",[e._v("When the last participating account is changed to PS_TRANSFERS_RECORDED, then\nthe settlement’s status is also changed to PS_TRANSFERS_RECORDED.")]),e._v(" "),n("p",[e._v("If an administrator attempts to change an account’s state to\nPS_TRANSFERS_RECORDED and either the settlement’s state or the settlement\naccount’s state is not PENDING_SETTLEMENT or PS_TRANSFERS_RECORDED, then the\nrequest will be rejected.")]),e._v(" "),n("h5",{attrs:{id:"ps-transfers-recorded-to-ps-transfers-reserved"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ps-transfers-recorded-to-ps-transfers-reserved"}},[e._v("#")]),e._v(" PS_TRANSFERS_RECORDED to PS_TRANSFERS_RESERVED")]),e._v(" "),n("p",[e._v("A new record is created in the "),n("strong",[e._v("transferstatechange")]),e._v(" table for the transfer\nthat was created in section 5.1.7.2 above. This record will have a status of\nRESERVED. If the participant is a net creditor as a result of the settlement,\nthen a record will also be created in the participantPositionChange table if the\naccount being reserved is for a net creditor in the settlement, as defined in\nSection 5.1.7.2 above. The Net Debit Cap is checked at this point, and if the\ncurrent position exceeds the Net Debit Cap, then the Net Debit Cap is\nautomatically adjusted by the amount of the net credit due to the account as\npart of the settlement and the participant is sent a notification of the new Net\nDebit Cap value and its currency.")]),e._v(" "),n("p",[e._v("When the last participating account is changed to PS_TRANSFERS_RESERVED, then\nthe settlement’s status is also changed to PS_TRANSFERS_RESERVED.")]),e._v(" "),n("p",[e._v("If an administrator attempts to change an account’s state to\nPS_TRANSFERS_RESERVED and either the settlement’s state or the settlement\naccount’s state is not PS_TRANSFERS_RECORDED or PS_TRANSFERS_RESERVED, then the\nrequest will be rejected.")]),e._v(" "),n("h5",{attrs:{id:"ps-transfers-reserved-to-ps-transfers-committed"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ps-transfers-reserved-to-ps-transfers-committed"}},[e._v("#")]),e._v(" PS_TRANSFERS_RESERVED to PS_TRANSFERS_COMMITTED")]),e._v(" "),n("p",[e._v("A new record is created in the "),n("strong",[e._v("transferstatechange")]),e._v(" table for the transfer\nthat was created in section 5.1.7.2 above. This record will have a status of\nCOMMITTED. If the participant is a net debtor as a result of the settlement,\nthen a record will also be created in the participantPositionChange table if the\naccount being reserved is for a net debtor in the settlement, as defined in\nSection 5.1.7.2 above.")]),e._v(" "),n("p",[e._v("When the last participating account is changed to PS_TRANSFERS_COMMITTED, then\nthe settlement’s status is also changed to PS_TRANSFERS_COMMITTED.")]),e._v(" "),n("p",[e._v("If an administrator attempts to change an account’s state to\nPS_TRANSFERS_COMMITTED and either the settlement’s state or the settlement\naccount’s state is not to PS_TRANSFERS_RESERVED or PS_TRANSFERS_COMMITTED, then\nthe request will be rejected.")]),e._v(" "),n("h5",{attrs:{id:"ps-transfers-committed-to-settled"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ps-transfers-committed-to-settled"}},[e._v("#")]),e._v(" PS_TRANSFERS_COMMITTED to SETTLED")]),e._v(" "),n("p",[e._v("When the first account is changed to a status of SETTLED, the settlement’s state\nis changed to SETTLING.")]),e._v(" "),n("p",[e._v("When the last participating account is changed to SETTLED, then the settlement’s\nstatus is also changed to SETTLED.")]),e._v(" "),n("p",[e._v("If an administrator attempts to change an account’s state to SETTLED and either\nthe settlement’s state or the settlement account’s state is not to\nPS_TRANSFERS_COMMITTED or SETTLED, then the request will be rejected.")]),e._v(" "),n("h3",{attrs:{id:"aborting-the-settlement"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#aborting-the-settlement"}},[e._v("#")]),e._v(" Aborting the settlement")]),e._v(" "),n("p",[e._v("If there is any failure in the scheme’s process for recovering the amounts due\nfrom participants in a settlement, the scheme can update the switch with this\ninformation by issuing a "),n("strong",[e._v("PUT")]),e._v(" to the "),n("strong",[e._v("/updateSettlementById")]),e._v(" resource of\nthe settlement API and setting the "),n("strong",[e._v("state")]),e._v(" value of the content of the message\nto ABORTED. A "),n("strong",[e._v("PUT")]),e._v(" call on the "),n("strong",[e._v("/updateSettlementById")]),e._v(" resource is the only\nmethod which may be used for ABORTING a settlement. If any account information\nis given in the call, then neither the "),n("strong",[e._v("state")]),e._v(" nor the "),n("strong",[e._v("reason")]),e._v(" nor the\n"),n("strong",[e._v("externalReference")]),e._v(" fields may be set. if the "),n("strong",[e._v("state")]),e._v(" value is set at the\ntop level of the call, then the "),n("strong",[e._v("reason")]),e._v(" field must also be set, and the\nrequest will be rejected if any account information is given in the call.")]),e._v(" "),n("p",[e._v("If an attempt is made to abort a settlement, and any of the accounts in the\nsettlement have the status PS_TRANSFERS_COMMITTED or SETTLED, then the request\nwill be rejected.")]),e._v(" "),n("p",[e._v("When a call is received, a new record is created in the\n"),n("strong",[e._v("settlementParticipantCurrencyStateChange")]),e._v(" table, and is given the appropriate\nstatus based on the status reported by the caller. Depending on the update that\nwas received, this may also require the status of the transaction and that of\nthe participant position to be updated. No, it is done at settlement level for\nthe entire settlement and all entries in settlementParticipantCurrency are\naffected.")]),e._v(" "),n("p",[e._v("Note: if the settlement is bilateral, then there is no obvious reason to abort\nthe entire settlement if one interchange fails. We should think about this use\ncase and how we would want to represent it. This document does not consider this\nuse case.")]),e._v(" "),n("p",[e._v("Aborting a settlement comprises the following steps:")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("The status of the transfers created in Section 5.1.6 above should be changed\nto ABORTED.")])]),e._v(" "),n("li",[n("p",[e._v("A new record is added to the "),n("strong",[e._v("settlementParticipantCurrencyStateChange")]),e._v("\ntable for each of the participant records in the settlement. This record has\na status of ABORTED, and the "),n("strong",[e._v("currentStateChangeId")]),e._v(" column in the\n"),n("strong",[e._v("settlementParticipantCurrency")]),e._v(" table for that participant record is\nchanged to point to this new record.")])]),e._v(" "),n("li",[n("p",[e._v("A new record is added to the "),n("strong",[e._v("settlementWindowStateChange")]),e._v(" table for each\nsettlement window in the settlement. This record has a status of ABORTED,\nand the "),n("strong",[e._v("currentStateChangeId")]),e._v(" column in the settlementWindow table for\nthat window is changed to point to this new record.")])]),e._v(" "),n("li",[n("p",[e._v("A new record is added to the "),n("strong",[e._v("settlementStateChange")]),e._v(" table for the\nsettlement. This record has a status of ABORTED, and the\n"),n("strong",[e._v("currentStateChangeId")]),e._v(" column in the "),n("strong",[e._v("settlement")]),e._v(" table is changed to\npoint to this new record.")])]),e._v(" "),n("li",[n("p",[e._v("If positions have been reserved for net creditors as a result of the\nsettlement (see Section 5.1.7.3 above,) then a balancing entry will be\ncreated in the "),n("strong",[e._v("participantPositionChange")]),e._v(" table to reverse the\nreservation of funds. This action does not at present reverse any change to\nthe account’s Net Debit Cap that may have been made as a consequence of this\nreservation.")])]),e._v(" "),n("li",[n("p",[e._v("Any records created in the "),n("strong",[e._v("transfers")]),e._v(" table (see Section 5.1.7.2 above)\nwill have their state changed in two steps by adding records to the\n"),n("strong",[e._v("transferStateChange")]),e._v(" table. The first step will change the transfer state\nto REJECTED. The second step will change the state to ABORTED.")])])]),e._v(" "),n("p",[e._v("Question: should there be/is there a time-out after which a settlement will be\naborted if it has not completed? If there is, how is it set? No, there isn’t\ntimeout on a settlement level. But when transfers are prepared (for\nPS_TRANSFERS_RECORED) expiration is set on a transfer level. Its value is\ncontrolled by a Config.TRANSFER_VALIDITY_SECONDS, which currently defaults to\n432000 seconds, which equals 5 days. It is big enough to avoid expiration.\nStill, if that happens, it would leave the data in an unrecoverable by the API\nstate. This is very good point and should be certainly addressed with the next\nincrement!")]),e._v(" "),n("h2",{attrs:{id:"recording-the-deposit-of-funds"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#recording-the-deposit-of-funds"}},[e._v("#")]),e._v(" Recording the deposit of funds")]),e._v(" "),n("p",[e._v("As participants are informed of their liabilities under the settlement, it is\nexpected that they will deposit funds in their settlement account to cover those\nliabilities. These activities are recorded via the central ledger administration\ninterface resource "),n("strong",[e._v("recordFundsIn")]),e._v(".")]),e._v(" "),n("p",[e._v("This action is called through a POST to the administration interface, giving the\nname of the participant and the account to be credited in the form POST\n/participants/{participantName}/accounts/{accountId} (e.g. "),n("strong",[e._v("POST\n/participants/myDfsp/accounts/1234")]),e._v(") The content of this message is as follows.")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("transferId: a UUID to be used to identify the transfer in the switch.")])]),e._v(" "),n("li",[n("p",[e._v("externalReference: a reference used to identify the transfer for the\nadministrator")])]),e._v(" "),n("li",[n("p",[e._v("action: this should be set to “recordFundsIn” for recording funds in.")])]),e._v(" "),n("li",[n("p",[e._v("reason: the reason why the transfer is being made.")])]),e._v(" "),n("li",[n("p",[e._v("amount: the amount of the transfer.")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("amount: the actual amount being transferred")])]),e._v(" "),n("li",[n("p",[e._v("currency: the ISO 4217 code of the currency of the deposit.")])])])]),e._v(" "),n("li",[n("p",[e._v("extensionList: a series of key/value pairs which are used to carry\nadditional information")])])]),e._v(" "),n("p",[e._v("When an administrator records that a participant has deposited funds to an\naccount, the amount deposited is recorded in an entry in the "),n("strong",[e._v("transfer")]),e._v(" table.\nThe parties to the transfer are recorded by entries in the\n"),n("strong",[e._v("transferParticipant")]),e._v(" table, with a ledger account type of the type requested\nin the POST for the participant and HUB_RECONCILIATION for the balancing entry.\nFor deposits, the participant account will be the creditor and the\nHUB_RECONCILIATION account the debtor. The application will currently reject\nrequests to this interface which do not have a ledger account type of\nSETTLEMENT.")]),e._v(" "),n("p",[e._v("A deposit goes through the following changes of state:")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("A record is created for the transfer in the "),n("strong",[e._v("transferStateChange")]),e._v(" table\nwith a state of RECEIVED_PREPARE.")])]),e._v(" "),n("li",[n("p",[e._v("Next, a record is created in the "),n("strong",[e._v("transferStateChange")]),e._v(" table with the\nstate RESERVED. This also creates a record in the\n"),n("strong",[e._v("participantPositionChange")]),e._v(" table to record the reservation of funds in\nthe HUB_RECONCILIATION account, and the "),n("strong",[e._v("participantPosition")]),e._v(" table’s\nvalue for that account is updated.")])]),e._v(" "),n("li",[n("p",[e._v("Finally, a record is created in the "),n("strong",[e._v("transferStateChange")]),e._v(" table with the\nstate COMMITTED. After this act, records are created in the\n"),n("strong",[e._v("participantPositionChange")]),e._v(" table for the creditor account to record the\ncompletion of the deposit, and the appropriate record in the\n"),n("strong",[e._v("participantPosition")]),e._v(" table has its balance updated.")])])]),e._v(" "),n("p",[e._v("These changes of state are simply chained together in sequence. There is no\ninterval or trigger between the steps.")]),e._v(" "),n("p",[e._v("This activity has no direct effect on the settlement process or on the Net Debit\nCap.")]),e._v(" "),n("h2",{attrs:{id:"recording-the-withdrawal-of-funds"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#recording-the-withdrawal-of-funds"}},[e._v("#")]),e._v(" Recording the withdrawal of funds")]),e._v(" "),n("p",[e._v("At various times, participants may wish to withdraw funds from their settlement\naccounts: for instance, if they are long-term net beneficiaries of transfers and\nare building up a surplus of liquidity. These activities are recorded via a\ntwo-phase process. In the first phase, the funds for the proposed withdrawal are\nreserved via the central ledger administration interface resource\n"),n("strong",[e._v("recordFundsOutPrepareReserve")]),e._v(". In the second phase, the withdrawal is\ncommitted via the "),n("strong",[e._v("recprdFundsOutCommit")]),e._v(" resource or aborted through the\n"),n("strong",[e._v("recordFundsOutAbort")]),e._v(" resource.")]),e._v(" "),n("p",[e._v("These activities are defined below.")]),e._v(" "),n("h3",{attrs:{id:"recordfundsoutpreparereserve"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#recordfundsoutpreparereserve"}},[e._v("#")]),e._v(" "),n("strong",[e._v("recordFundsOutPrepareReserve")])]),e._v(" "),n("p",[e._v("This action is called through a POST to the administration interface, giving the\nname of the participant and the account to be credited (e.g. "),n("strong",[e._v("POST\n/participants/myDfsp/accounts/1234")]),e._v(") The content of this message is as follows.")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("transferId: a UUID to be used to identify the transfer in the switch.")])]),e._v(" "),n("li",[n("p",[e._v("externalReference: a reference used to identify the transfer for the\nadministrator")])]),e._v(" "),n("li",[n("p",[e._v("action: this should be set to “recordFundsOutPrepareReserve” for recording\nfunds withdrawals.")])]),e._v(" "),n("li",[n("p",[e._v("reason: the reason why the transfer is being made.")])]),e._v(" "),n("li",[n("p",[e._v("amount: the amount of the transfer.")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("amount: the actual amount being transferred")])]),e._v(" "),n("li",[n("p",[e._v("currency: the ISO 4217 code of the currency of the deposit.")])])])]),e._v(" "),n("li",[n("p",[e._v("extensionList: a series of key/value pairs which are used to carry\nadditional information")])])]),e._v(" "),n("p",[e._v("When an administrator records that a participant has requested the withdrawal of\nfunds from an account, the amount to be withdrawn is recorded in an entry in the\n"),n("strong",[e._v("transfer")]),e._v(" table. The parties to the transfer are recorded by entries in the\n"),n("strong",[e._v("transferParticipant")]),e._v(" table, with a ledger account type of the type requested\nin the POST for the participant and HUB_RECONCILIATION for the balancing entry.\nFor withdrawals, the participant account will be the debtor and the\nHUB_RECONCILIATION account the creditor. The application will currently reject\nrequests to this interface which do not have a ledger account type of\nSETTLEMENT.")]),e._v(" "),n("p",[e._v("Reservation of a withdrawal goes through the following changes of state:")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("A record is created for the transfer in the "),n("strong",[e._v("transferStateChange")]),e._v(" table\nwith a state of RECEIVED_PREPARE.")])]),e._v(" "),n("li",[n("p",[e._v("Next, a record is created in the "),n("strong",[e._v("transferStateChange")]),e._v(" table with the\nstate RESERVED. This also creates a record in the\n"),n("strong",[e._v("participantPositionChange")]),e._v(" table to record the reservation of funds in\nthe participant’s settlement account, and the "),n("strong",[e._v("participantPosition")]),e._v("\ntable’s value for that account is updated.")])])]),e._v(" "),n("p",[e._v("These changes of state are simply chained together in sequence. There is no\ninterval or trigger between the steps."),n("strong",[e._v("recordFundsOutCommit")])]),e._v(" "),n("p",[e._v("This action is called through a POST to the administration interface, giving the\nname of the participant and the account to be credited (e.g. "),n("strong",[e._v("POST\n/participants/myDfsp/accounts/1234")]),e._v(") The content of this message is as follows.")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("transferId: a UUID to be used to tie the commit to the preceding reservation\nin the switch.")])]),e._v(" "),n("li",[n("p",[e._v("externalReference: a reference used to identify the transfer for the\nadministrator")])]),e._v(" "),n("li",[n("p",[e._v("action: this should be set to “recordFundsOutCommit” for recording funds\ncommitments.")])]),e._v(" "),n("li",[n("p",[e._v("reason: the reason why the transfer is being made.")])]),e._v(" "),n("li",[n("p",[e._v("amount: the amount of the transfer.")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("amount: the actual amount being transferred")])]),e._v(" "),n("li",[n("p",[e._v("currency: the ISO 4217 code of the currency of the deposit.")])])])]),e._v(" "),n("li",[n("p",[e._v("extensionList: a series of key/value pairs which are used to carry\nadditional information")])])]),e._v(" "),n("p",[e._v("When an administrator records that a participant wants to commit the withdrawal\nof funds from an account, the original entry in the "),n("strong",[e._v("transfer")]),e._v(" table is\nidentified. The parties to the transfer are recorded by entries in the\n"),n("strong",[e._v("transferParticipant")]),e._v(" table, with a ledger account type of the type requested\nin the POST for the participant and HUB_RECONCILIATION for the balancing entry.\nFor withdrawals, the participant account will be the debtor and the\nHUB_RECONCILIATION account the creditor. The application will currently reject\nrequests to this interface which do not have a ledger account type of\nSETTLEMENT.")]),e._v(" "),n("p",[e._v("Commitment of a withdrawal goes through the following changes of state: a record\nis created in the "),n("strong",[e._v("transferStateChange")]),e._v(" table with the state COMMITTED. After\nthis act, records are created in the "),n("strong",[e._v("participantPositionChange")]),e._v(" table for the\ncreditor account to record the completion of the deposit, and the appropriate\nrecord in the "),n("strong",[e._v("participantPosition")]),e._v(" table has its balance updated. These\nchanges of state are simply chained together in sequence. There is no interval\nor trigger between the steps.")]),e._v(" "),n("p",[e._v("This activity has no direct effect on the settlement process or on the Net Debit\nCap.")]),e._v(" "),n("h1",{attrs:{id:"proposed-enhancements"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#proposed-enhancements"}},[e._v("#")]),e._v(" Proposed enhancements")]),e._v(" "),n("p",[e._v("This section describes the enhancements to the existing OSS settlement process\n(described in Section 4.1 above) which are proposed. Each enhancement is shown\nin a separate section and, where there are dependencies between enhancements,\nthese are listed in the enhancement’s description.")]),e._v(" "),n("h2",{attrs:{id:"request-settlement-by-currency-epic"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#request-settlement-by-currency-epic"}},[e._v("#")]),e._v(" Request settlement by currency [EPIC]")]),e._v(" "),n("p",[e._v("The following changes are required to support settling separately for different\ncurrencies.")]),e._v(" "),n("h3",{attrs:{id:"database-changes"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#database-changes"}},[e._v("#")]),e._v(" Database changes")]),e._v(" "),n("p",[e._v("The following changes are required to support multi-currency settlement.")]),e._v(" "),n("h4",{attrs:{id:"addition-of-a-settlementwindowcontent-table-story-1"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#addition-of-a-settlementwindowcontent-table-story-1"}},[e._v("#")]),e._v(" Addition of a settlementWindowContent table [Story #1]")]),e._v(" "),n("p",[e._v("A new table will be added to the database. The name of this table will be\n"),n("strong",[e._v("settlementWindowContent")]),e._v(". The table will contain an entry for each item of\ncontent in a given settlement window, broken down by ledger account type and\ncurrency. The full column structure of the table is as follows:")]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",[n("strong",[e._v("Column name")])]),e._v(" "),n("th",[n("strong",[e._v("Description")])]),e._v(" "),n("th",[n("strong",[e._v("Attributes")])])])]),e._v(" "),n("tbody",[n("tr",[n("td",[n("strong",[e._v("settlementWindowContentId")])]),e._v(" "),n("td",[e._v("Auto-generated key for the record.")]),e._v(" "),n("td",[e._v("BIGINT(20). Unsigned, not null, primary key, autoincrement")])]),e._v(" "),n("tr",[n("td",[n("strong",[e._v("settlementWindowId")])]),e._v(" "),n("td",[e._v("The settlement window that the record belongs to.")]),e._v(" "),n("td",[e._v("BIGINT(20). Unsigned, not null. Foreign Key to "),n("strong",[e._v("settlementWindow")])])]),e._v(" "),n("tr",[n("td",[n("strong",[e._v("ledgerAccountTypeId")])]),e._v(" "),n("td",[e._v("The ledger account that the record refers to.")]),e._v(" "),n("td",[e._v("INT(10). Unsigned, not null. Foreign key to "),n("strong",[e._v("ledgerAccountType")])])]),e._v(" "),n("tr",[n("td",[n("strong",[e._v("currencyId")])]),e._v(" "),n("td",[e._v("The currency that the record refers to.")]),e._v(" "),n("td",[e._v("VARCHAR(3). Not null. Foreign key to "),n("strong",[e._v("currency")]),e._v(".")])]),e._v(" "),n("tr",[n("td",[n("strong",[e._v("createdDate")])]),e._v(" "),n("td",[e._v("The date and time when the record was created.")]),e._v(" "),n("td",[e._v("DATETIME. Not null. Defaults to CURRENT_TIMESTAMP.")])]),e._v(" "),n("tr",[n("td",[n("strong",[e._v("currentStateChangeId")])]),e._v(" "),n("td",[e._v("The current state of this entry.")]),e._v(" "),n("td",[e._v("BIGINT(20). Unsigned. Foreign key to "),n("strong",[e._v("settlementWindowContentStateChange")])])])])]),e._v(" "),n("p"),e._v(" "),n("h4",{attrs:{id:"addition-of-a-settlementwindowcontentstatechange-table-story-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#addition-of-a-settlementwindowcontentstatechange-table-story-2"}},[e._v("#")]),e._v(" Addition of a settlementWindowContentStateChange table [Story #2]")]),e._v(" "),n("p",[e._v("A new table will be added to the database. The name of this table will be\n"),n("strong",[e._v("settlementWindowContentStateChange")]),e._v(". The table will track changes to the\nstatus of entries in the "),n("strong",[e._v("settlementWindowContent")]),e._v(" table. The full column\nstructure of the table is as follows:")]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",[n("strong",[e._v("Column name")])]),e._v(" "),n("th",[n("strong",[e._v("Description")])]),e._v(" "),n("th",[n("strong",[e._v("Attributes")])])])]),e._v(" "),n("tbody",[n("tr",[n("td",[n("strong",[e._v("settlementWindowContentStateChangeId")])]),e._v(" "),n("td",[e._v("Auto-generated key for the record.")]),e._v(" "),n("td",[e._v("BIGINT(20). Unsigned, not null, primary key, autoincrement")])]),e._v(" "),n("tr",[n("td",[n("strong",[e._v("settlementWindowContentId")])]),e._v(" "),n("td",[e._v("The settlement window content record whose status is being tracked.")]),e._v(" "),n("td",[e._v("BIGINT(20). Unsigned, not null. Foreign Key to "),n("strong",[e._v("settlementWindowContent")])])]),e._v(" "),n("tr",[n("td",[n("strong",[e._v("settlementWindowStateId")])]),e._v(" "),n("td",[e._v("The record’s status.")]),e._v(" "),n("td",[e._v("VARCHAR(50). Not null. Foreign key to "),n("strong",[e._v("settlementWindowState")])])]),e._v(" "),n("tr",[n("td",[n("strong",[e._v("reason")])]),e._v(" "),n("td",[e._v("An optional field giving the reason for the state being set.")]),e._v(" "),n("td",[e._v("VARCHAR(512).")])]),e._v(" "),n("tr",[n("td",[n("strong",[e._v("createdDate")])]),e._v(" "),n("td",[e._v("The date and time when the record was created")]),e._v(" "),n("td",[e._v("DATETIME. Not null. Defaults to CURRENT_TIMESTAMP")])])])]),e._v(" "),n("p"),e._v(" "),n("h4",{attrs:{id:"changes-to-the-settlementtransferparticipant-table-story-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#changes-to-the-settlementtransferparticipant-table-story-3"}},[e._v("#")]),e._v(" Changes to the settlementTransferParticipant table [Story #3]")]),e._v(" "),n("p",[e._v("The name of the "),n("strong",[e._v("settlementTransferParticipant")]),e._v(" table should be changed to\n"),n("strong",[e._v("settlementContentAggregation")]),e._v(".")]),e._v(" "),n("p",[e._v("The column structure of the "),n("strong",[e._v("settlementContentAggregation")]),e._v(" table should be\nmodified as follows:")]),e._v(" "),n("ol",[n("li",[e._v("Remove the following foreign keys from the table:\n"),n("ol",[n("li",[e._v("settlementtransferparticipant_settlementid_foreign")]),e._v(" "),n("li",[e._v("settlementtransferparticipant_settlementwindowid_foreign")])])]),e._v(" "),n("li",[e._v("Remove the following columns from the table:\n"),n("ol",[n("li",[e._v("settlementId")]),e._v(" "),n("li",[e._v("settlementWindowId")])])]),e._v(" "),n("li",[e._v("Add the following column to the table:\n"),n("ol",[n("li",[e._v("Column name: "),n("strong",[e._v("settlementWindowContentId")])]),e._v(" "),n("li",[e._v("Attributes: BIGINT(20), unsigned, not null")])])]),e._v(" "),n("li",[e._v("Add the following foreign key to the table:\n"),n("ol",[n("li",[e._v("Name: settlementContentAggregation_settlementwindowcontent_foreign")]),e._v(" "),n("li",[e._v("Child column "),n("strong",[e._v("settlementWindowContentId")])]),e._v(" "),n("li",[e._v("Refers to table: "),n("strong",[e._v("settlementWindowContent")])]),e._v(" "),n("li",[e._v("Refers to column: "),n("strong",[e._v("settlementWindowContentId")])])])])]),e._v(" "),n("p",[e._v("All database scripts which use the "),n("strong",[e._v("settlementTransferParticipant")]),e._v(" table will\nbe changed to accommodate the new name and structure of the table. [Story #8]")]),e._v(" "),n("p",[e._v("Queries to filter the records in the "),n("strong",[e._v("settlementContentAggregation")]),e._v(" table\nrequired for a settlement in a particular currency will need to join across from\nthat table to the "),n("strong",[e._v("participantCurrency")]),e._v(" table using the\n"),n("strong",[e._v("participantCurrencyId")]),e._v(" column to ascertain the currency to which a particular\nrow refers. The "),n("strong",[e._v("currencyId")]),e._v(" column is held in the "),n("strong",[e._v("participantCurrency")]),e._v("\ntable. [Story #9]")]),e._v(" "),n("h4",{attrs:{id:"add-structures-relating-to-settlement-models-story-4"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#add-structures-relating-to-settlement-models-story-4"}},[e._v("#")]),e._v(" Add structures relating to settlement models [Story #4]")]),e._v(" "),n("p",[e._v("In order to support the specification of settlement models, which will include\ncurrencies, the database changes specified in Section 6.2.1.1 below should be\nadded to the database.")]),e._v(" "),n("p",[e._v("Settlement models describing the settlement types required for a given\nimplementation will be developed and tested."),n("strong",[e._v("[Story #4a]")])]),e._v(" "),n("h4",{attrs:{id:"change-to-settlement-table-story-5"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#change-to-settlement-table-story-5"}},[e._v("#")]),e._v(" Change to settlement table [Story #5]")]),e._v(" "),n("p",[e._v("The "),n("strong",[e._v("settlement")]),e._v(" table in the central ledger database needs to be modified to\nadd a "),n("em",[e._v("settlementModel")]),e._v(" column. This column should have the following\ncharacteristics:")]),e._v(" "),n("ul",[n("li",[e._v("The column should be required (NOT NULL) and unsigned.")]),e._v(" "),n("li",[e._v("The column’s data type should be integer(10)")]),e._v(" "),n("li",[e._v("The column should be defined as a foreign key reference to the\n"),n("em",[e._v("settlementModelId")]),e._v(" field of the "),n("strong",[e._v("settlementModel")]),e._v(" table.")])]),e._v(" "),n("p",[e._v("When this change is applied to an existing database, a settlement model to\ndescribe the default settlement should be created. The settlementCurrencyId\ncolumn in this model should be left blank (= all currencies.) The\nsettlementModel column in all existing records in the settlement table should be\nset to point to this model’s ID. A script to apply this change should be\ncreated, tested and stored in the repository.")]),e._v(" "),n("h3",{attrs:{id:"changes-to-processing"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#changes-to-processing"}},[e._v("#")]),e._v(" Changes to processing")]),e._v(" "),n("p",[e._v("The following changes to the processing code are required to support\nmulti-currency settlement.")]),e._v(" "),n("h4",{attrs:{id:"change-to-code-supporting-closesettlementwindow-resource"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#change-to-code-supporting-closesettlementwindow-resource"}},[e._v("#")]),e._v(" Change to code supporting closeSettlementWindow resource")]),e._v(" "),n("p",[e._v("The existing API "),n("sup",[n("a",{attrs:{href:"https://github.com/mojaloop/central-settlement/blob/master/src/interface/swagger.json",target:"_blank",rel:"noopener noreferrer"}},[e._v("2"),n("OutboundLink")],1)]),e._v(" provides a single function\n("),n("strong",[e._v("closeSettlementWindow")]),e._v(") to manage settlement windows. This function allows\nits user to select a settlement window by ID number and to input a new status\nfor the window and a reason for that status.")]),e._v(" "),n("p",[e._v("When a settlement window is closed, the code supporting this activity should\nperform two functions, as follows. These functions should be performed in the\nbackground and without impacting system performance.")]),e._v(" "),n("h5",{attrs:{id:"generate-records-in-the-settlementwindowcontent-table-story-1095"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#generate-records-in-the-settlementwindowcontent-table-story-1095"}},[e._v("#")]),e._v(" Generate records in the settlementWindowContent table [Story #1095]")]),e._v(" "),n("p",[e._v("The code should generate a record in the "),n("strong",[e._v("settlementWindowContent")]),e._v(" table for\neach ledger entry type/currency combination found in the transfers in the\nsettlement window. This information can be obtained from the following query:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("SELECT DISTINCT\n  @mySettlementWindowId, pc.ledgerAccountTypeId, pc.currencyId\nFROM transferFulfilment tf\nINNER JOIN transferParticipant tp\n  ON tp.transferId = tf.transferId\nINNER JOIN participantCurrency pc \n  ON pc.participantCurrencyId = tp.participantCurrencyId\nWHERE tf.settlementWindowId = @mySettlementWindowId;\n")])])]),n("h5",{attrs:{id:"generate-records-in-the-settlementcontentaggregation-table-story-1095"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#generate-records-in-the-settlementcontentaggregation-table-story-1095"}},[e._v("#")]),e._v(" Generate records in the settlementContentAggregation table [Story #1095]")]),e._v(" "),n("p",[e._v("The code should calculate the aggregate values for all transfers which form part\nof that settlement window and store them in the "),n("strong",[e._v("settlementContentAggregation")]),e._v("\ntable. Aggregates should be produced for the following segmentation:")]),e._v(" "),n("ol",[n("li",[e._v("Participant")]),e._v(" "),n("li",[e._v("Currency")]),e._v(" "),n("li",[e._v("Ledger account type")]),e._v(" "),n("li",[e._v("Participant role type")]),e._v(" "),n("li",[e._v("Ledger entry type")])]),e._v(" "),n("p",[e._v("The following query will perform this function for a given settlement window:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("INSERT INTO settlementContentAggregation\n  (settlementWindowContentId, participantCurrencyId, \n  transferParticipantRoleTypeId, ledgerEntryTypeId, amount)\nSELECT swc.settlementWindowContentId, pc.participantCurrencyId,\n  tp.transferParticipantRoleTypeId, tp.ledgerEntryTypeId, SUM(tp.amount)\nFROM transferFulfilment tf\nINNER JOIN transferParticipant tp\n  ON tf.transferId = tp.transferId\nINNER JOIN participantCurrency pc \n  ON pc.participantCurrencyId = tp.participantCurrencyId\nINNER JOIN settlementWindowContent swc\n  ON swc.settlementWindowId = tf.settlementWindowId\n  AND swc.ledgerAccountTypeId = pc.ledgerAccountTypeId\n  AND swc.currencyId = pc.currencyId\nWHERE tf.settlementWindowId = @mySettlementWindowId\nGROUP BY swc.settlementWindowContentId, pc.participantCurrencyId, \n   tp.transferParticipantRoleTypeId, tp.ledgerEntryTypeId;\n")])])]),n("h4",{attrs:{id:"createsettlement"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#createsettlement"}},[e._v("#")]),e._v(" createSettlement")]),e._v(" "),n("p",[e._v("The parameters for the "),n("strong",[e._v("createSettlement")]),e._v(" resource should be extended to\ninclude the settlement model for which the settlement is required.")]),e._v(" "),n("p",[e._v("When the settlement is created, the settlement model for which the settlement is\nrequired should be added to the new row in the "),n("strong",[e._v("settlement")]),e._v(" table. [Story #1097]")]),e._v(" "),n("p",[e._v("When a settlement is requested, the switch should check that the settlement\nmodel for which settlement is being requested requires NET settlement and not\nGROSS settlement. If the requested settlement model requires GROSS settlement,\nthen the request should be rejected with an error.")]),e._v(" "),n("p",[e._v("The verification procedures associated with the "),n("strong",[e._v("createSettlement")]),e._v(" resource\nshould be changed to check that some of the settlement windows associated with\nthe proposed settlement contain entries for the settlement model requested. If\nthere are no entries for the settlement model requested for any of the\nsettlement windows requested, then an error should be returned and the\nsettlement request rejected. [Story #1096]")]),e._v(" "),n("h4",{attrs:{id:"updating-the-progress-of-a-settlement"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#updating-the-progress-of-a-settlement"}},[e._v("#")]),e._v(" Updating the progress of a settlement")]),e._v(" "),n("p",[e._v("When the status for a settlement participant is changed to SETTLED, this will result in\nchanges to the status of all the records in the "),n("strong",[e._v("settlementContentAggregation")]),e._v("\ntable for the given participant, identified by the compound key: settlementId + participantCurrencyId.")]),e._v(" "),n("p",[e._v("[Story #16]")]),e._v(" "),n("p",[e._v("The code should then check to see if, as a result of the updates to the records\nin "),n("strong",[e._v("settlementContentAggregation")]),e._v(", all records for a given combination of\nsettlement window, ledger account type and currency have the same status. If\nthey have, then the appropriate record in the "),n("strong",[e._v("settlementWindowContent")]),e._v(" table\nshould be updated to have that status.")]),e._v(" "),n("p",[e._v("The code should then check to see if all records in the\n"),n("strong",[e._v("settlementWindowContent")]),e._v(" table for a given settlement window have the same\nstatus. If they have, then the appropriate record in the "),n("strong",[e._v("settlementWindow")])]),e._v(" "),n("h2",{attrs:{id:"support-continuous-gross-settlement"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#support-continuous-gross-settlement"}},[e._v("#")]),e._v(" Support continuous gross settlement")]),e._v(" "),n("p",[e._v("Continuous Gross Settlement is a settlement model in which each transaction is\nsettled as soon as it is fulfilled. The following changes are required to\nimplement this change.")]),e._v(" "),n("h3",{attrs:{id:"database-changes-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#database-changes-2"}},[e._v("#")]),e._v(" Database changes")]),e._v(" "),n("p",[e._v("The database changes shown in Section 8 below should be implemented. These can\nbe summarised as follows:")]),e._v(" "),n("h4",{attrs:{id:"changes-to-support-the-settlement-model"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#changes-to-support-the-settlement-model"}},[e._v("#")]),e._v(" Changes to support the settlement model")]),e._v(" "),n("p",[e._v("A number of new tables are required to define a settlement model and to store\nthe enumerations for its definition types. This comprises the following tables\nin the ERD:")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("settlementDelay")])]),e._v(" "),n("li",[n("p",[e._v("settlementInterchange")])]),e._v(" "),n("li",[n("p",[e._v("settlementModel")])])]),e._v(" "),n("p",[e._v("In addition, the "),n("strong",[e._v("settlementmodel")]),e._v(" table has foreign keys to two existing\ntables, as follows:")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("A foreign key to the "),n("strong",[e._v("currency")]),e._v(" table to enable the settlement model to\nsettle only scheme accounts in a particular currency. If this entry is\nblank, this should be interpreted as saying that the settlement model\nsettles all currencies that are not specified as being settled by other\nsettlement models for the same account type.")])]),e._v(" "),n("li",[n("p",[e._v("A foreign key to the "),n("strong",[e._v("ledgerAccountType")]),e._v(" table. This specifies that the\nsettlement model settles accounts of this type.")])])]),e._v(" "),n("h4",{attrs:{id:"changes-to-the-ledgeraccounttype-table"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#changes-to-the-ledgeraccounttype-table"}},[e._v("#")]),e._v(" Changes to the "),n("strong",[e._v("ledgeraccounttype")]),e._v(" table")]),e._v(" "),n("p",[e._v("The current "),n("strong",[e._v("ledgeraccounttype")]),e._v(" table stores a number of entries for account\ntypes which should not be used for settlements – for instance,\nHUB_MULTILATERAL_SETTLEMENT. A column should therefore be added to the\n"),n("strong",[e._v("ledgeraccounttype")]),e._v(" table to indicate whether the account type can be attached\nto a settlement model or not. This column is called "),n("strong",[e._v("settleable")]),e._v(", and is\nspecified as a Boolean value, NOT NULL and with a default of FALSE.")]),e._v(" "),n("p",[e._v("Of the existing ledger account types, PRINCIPAL_VALUE, INTERCHANGE_FEE and\nHUB_FEE should be marked as capable of being attached to settlement models (this\nvalue should be TRUE.) For all other ledger account types, the column should be\nset to FALSE. If new ledger account types are added to this table via the\neventual settlement API, then they should have a value of TRUE.")]),e._v(" "),n("h4",{attrs:{id:"changes-to-the-ledgerentrytype-table"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#changes-to-the-ledgerentrytype-table"}},[e._v("#")]),e._v(" Changes to the "),n("strong",[e._v("ledgerentrytype")]),e._v(" table")]),e._v(" "),n("p",[e._v("Implementation of the TIPS settlement model requires an explicit association\nbetween ledger entry types and the account types in which they should appear.\nSince each ledger entry type should only appear in a single account type, though\nmultiple ledger entry types may appear in a given account type, this is modelled\nby including a foreign key reference to the "),n("strong",[e._v("ledgeraccounttype")]),e._v(" table as a\ncolumn in the "),n("strong",[e._v("ledgerentrytype")]),e._v(" table. It should be noted that this applies\nonly to ledger entry types which are associated with a settlement model, as\ndescribed in Section 6.2.1.2 above. The assignment of existing entries in the\ndatabase would be as follows:")]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",[e._v("Ledger Entry Type")]),e._v(" "),n("th",[e._v("Ledger Account Type")])])]),e._v(" "),n("tbody",[n("tr",[n("td",[e._v("PRINCIPAL_VALUE")]),e._v(" "),n("td",[e._v("POSITION")])]),e._v(" "),n("tr",[n("td",[e._v("INTERCHANGE_FEE")]),e._v(" "),n("td",[e._v("INTERCHANGE_FEE")])]),e._v(" "),n("tr",[n("td",[e._v("HUB_FEE")]),e._v(" "),n("td",[e._v("HUB_FEE")])]),e._v(" "),n("tr",[n("td"),e._v(" "),n("td")])])]),e._v(" "),n("h4",{attrs:{id:"changes-to-the-settlement-table"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#changes-to-the-settlement-table"}},[e._v("#")]),e._v(" Changes to the "),n("strong",[e._v("settlement")]),e._v(" table")]),e._v(" "),n("p",[e._v("The "),n("strong",[e._v("settlement")]),e._v(" table should have a column added to it to allow the\nsettlement model to be used in settling it to be specified. The column should be\ncalled "),n("em",[e._v("settlementModelId")]),e._v(". It should have the same data type as the equivalent\nfield in the "),n("strong",[e._v("settlementModel")]),e._v(" table, and should be a foreign key into that\ntable. It should be defined as not null.")]),e._v(" "),n("h4",{attrs:{id:"changes-to-the-settlementwindow-table"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#changes-to-the-settlementwindow-table"}},[e._v("#")]),e._v(" Changes to the "),n("strong",[e._v("settlementWindow")]),e._v(" table")]),e._v(" "),n("p",[e._v("As well as settlements, individual settlement windows will need to be assigned\nto settlement models. The "),n("strong",[e._v("settlementWindow")]),e._v(" table should therefore have a\ncolumn added to it to allow the settlement model to be used in settling it to be\nspecified. The column should be called "),n("em",[e._v("settlementModelId")]),e._v(". It should have the\nsame data type as the equivalent field in the "),n("strong",[e._v("settlementModel")]),e._v(" table, and\nshould be a foreign key into that table. It should be defined as not null.")]),e._v(" "),n("p",[e._v("This concludes the list of schema changes required to support the TIPS\nsettlement models")]),e._v(" "),n("h3",{attrs:{id:"api-changes"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#api-changes"}},[e._v("#")]),e._v(" API changes")]),e._v(" "),n("p",[e._v("API Support for the settlement functionality required for TIPS will include the\nfollowing functions:")]),e._v(" "),n("h4",{attrs:{id:"close-a-settlement-window"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#close-a-settlement-window"}},[e._v("#")]),e._v(" Close a settlement window")]),e._v(" "),n("p",[e._v("The existing API definition "),n("sup",[n("a",{attrs:{href:"https://github.com/mojaloop/central-settlement/blob/master/src/interface/swagger.json",target:"_blank",rel:"noopener noreferrer"}},[e._v("2"),n("OutboundLink")],1)]),e._v(" supports a\n"),n("strong",[e._v("closeSettlementWindow")]),e._v(" resource. This function allows its user to select a\nsettlement window by ID number and to input a new status for the window and a\nreason for that status. This resource will retain its current signature, but the\ncode supporting it needs to change as follows.")]),e._v(" "),n("p",[e._v("When a settlement window is closed, the system should create a new settlement\nwindow with the same settlement model as the newly closed settlement window, and\nshould make this the active window.")]),e._v(" "),n("p",[e._v("When a settlement window is closed, the code supporting this activity should\ncalculate the aggregate values for all transfers which form part of that\nsettlement window and store them in the "),n("strong",[e._v("settlementTransferParticipant")]),e._v(" table.\nAggregates should be produced for the following segmentation:")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("Participant")])]),e._v(" "),n("li",[n("p",[e._v("Currency")])]),e._v(" "),n("li",[n("p",[e._v("Ledger account type")])]),e._v(" "),n("li",[n("p",[e._v("Participant role type")])]),e._v(" "),n("li",[n("p",[e._v("Ledger entry type")])])]),e._v(" "),n("p",[e._v("The following example code will produce the aggregations required for a given\nsettlement window (identified as @MyWindow in the example):")]),e._v(" "),n("p",[e._v("SELECT")]),e._v(" "),n("p",[e._v("S.settlementId")]),e._v(" "),n("p",[e._v(", W.settlementWindowId")]),e._v(" "),n("p",[e._v(", P.participantCurrencyId")]),e._v(" "),n("p",[e._v(", P.transferParticipantRoleTypeId")]),e._v(" "),n("p",[e._v(", P.ledgerEntryTypeId")]),e._v(" "),n("p",[e._v(", SUM(P.amount)")]),e._v(" "),n("p",[e._v(", CURRENT_TIMESTAMP AS createdDate")]),e._v(" "),n("p",[e._v("FROM")]),e._v(" "),n("p",[e._v("settlementWindow W INNER JOIN settlementModel M ON W.settlementModelId =\nM.idsettlementModel")]),e._v(" "),n("p",[e._v("INNER JOIN settlementSettlementWindow S ON W.settlementWindowId =\nS.settlementWindowId")]),e._v(" "),n("p",[e._v("INNER JOIN ledgerAccountType L ON M.idsettlementModel = L.settlementModelId")]),e._v(" "),n("p",[e._v("INNER JOIN transferFulfilment F ON W.settlementWindowId = F.settlementWindowId")]),e._v(" "),n("p",[e._v("INNER JOIN transferParticipant P ON F.transferId = P.TransferId")]),e._v(" "),n("p",[e._v("INNER JOIN participantCurrency PC ON P.participantCurrencyId =\nPC.participantCurrencyId")]),e._v(" "),n("p",[e._v("AND PC.ledgerAccountTypeId = L.ledgerAccountTypeId")]),e._v(" "),n("p",[e._v("WHERE")]),e._v(" "),n("p",[e._v("W.settlementWindowId = @MyWindow")]),e._v(" "),n("p",[e._v("AND")]),e._v(" "),n("p",[e._v("(PC.currencyId = M.settlementcurrencyId OR M.settlementcurrencyId IS NULL)")]),e._v(" "),n("p",[e._v("GROUP BY")]),e._v(" "),n("p",[e._v("S.settlementId")]),e._v(" "),n("p",[e._v(", W.settlementWindowId")]),e._v(" "),n("p",[e._v(", P.participantCurrencyId")]),e._v(" "),n("p",[e._v(", P.transferParticipantRoleTypeId")]),e._v(" "),n("p",[e._v(", P.ledgerEntryTypeId;")]),e._v(" "),n("h4",{attrs:{id:"getting-information-about-a-settlement-window"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#getting-information-about-a-settlement-window"}},[e._v("#")]),e._v(" Getting information about a settlement window")]),e._v(" "),n("p",[e._v("The existing API definition "),n("sup",[n("a",{attrs:{href:"https://github.com/mojaloop/central-settlement/blob/master/src/interface/swagger.json",target:"_blank",rel:"noopener noreferrer"}},[e._v("2"),n("OutboundLink")],1)]),e._v(" supports a\n"),n("strong",[e._v("getSettlementWindowById")]),e._v(" resource. This function allows its user to obtain\ninformation about a settlement window by giving the ID that was returned when\nthe settlement window was created.")]),e._v(" "),n("p",[e._v("This call returns a "),n("strong",[e._v("SettlementWindow")]),e._v(" object. This object will need to be\nextended to include the name of the settlement model to which the settlement\nwindow belongs.")]),e._v(" "),n("h4",{attrs:{id:"getting-information-about-settlement-windows-using-parameters"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#getting-information-about-settlement-windows-using-parameters"}},[e._v("#")]),e._v(" Getting information about settlement windows using parameters")]),e._v(" "),n("p",[e._v("The existing API definition "),n("sup",[n("a",{attrs:{href:"https://github.com/mojaloop/central-settlement/blob/master/src/interface/swagger.json",target:"_blank",rel:"noopener noreferrer"}},[e._v("2"),n("OutboundLink")],1)]),e._v(" supports a\n"),n("strong",[e._v("getSettlementWindowsByParams")]),e._v(" resource. This function allows its user to\nobtain information about all settlement windows which meet the criteria\nspecified by the user. The following changes will need to be made to this call:")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("The parameters supported by the call will need to be extended to allow a\nuser to request settlement windows by settlement model. The user should be\nable to enter the name of a settlement model.")])]),e._v(" "),n("li",[n("p",[e._v("This call returns an array of "),n("strong",[e._v("SettlementWindow")]),e._v(" objects. It is assumed\nthat these objects will have been changed by the changes specified in\nSection 6.2.2.2 above, and that no further processing will be required for\nthis call.")])])]),e._v(" "),n("h4",{attrs:{id:"requesting-a-settlement"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#requesting-a-settlement"}},[e._v("#")]),e._v(" Requesting a settlement")]),e._v(" "),n("p",[e._v("The existing API definition "),n("sup",[n("a",{attrs:{href:"https://github.com/mojaloop/central-settlement/blob/master/src/interface/swagger.json",target:"_blank",rel:"noopener noreferrer"}},[e._v("2"),n("OutboundLink")],1)]),e._v(" supports a "),n("strong",[e._v("createSettlement")]),e._v("\nresource. This function allows its user to request a settlement for a given set\nof settlement windows, which are passed to the resource as parameters. The\nfollowing changes will need to be made to this call:")]),e._v(" "),n("p",[e._v("The parameters for the "),n("strong",[e._v("createSettlement")]),e._v(" resource are defined in the\n"),n("strong",[e._v("SettlementEventPayload")]),e._v(" object. This object will need to have a parameter\nadded to specify the settlement model which is to be settled. The parameter\nshould be called "),n("em",[e._v("settlementModel")]),e._v(", and it should be a string. It should be\nrequired.")]),e._v(" "),n("p",[e._v("The following validation should be performed on this parameter when the request\nis received via the API:")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("The content of the parameter is a case-insensitive match for an active entry\nin the "),n("strong",[e._v("settlementmodel")]),e._v(" table, ignoring whitespace.")])]),e._v(" "),n("li",[n("p",[e._v("The "),n("em",[e._v("settlementtypeid")]),e._v(" column in the record in the selected settlement model\nshould not point to a record in the "),n("strong",[e._v("settlementdelay")]),e._v(" table whose\n"),n("em",[e._v("settlementDelayName")]),e._v(" value is “IMMEDIATE”. If it does, the request should\nbe rejected and an error message returned to the caller.")])])]),e._v(" "),n("p",[e._v("The id of the settlement model requested should be stored in the\nsettlementModelId column of the row created in the "),n("strong",[e._v("settlement")]),e._v(" table to\ndescribe the settlement.")]),e._v(" "),n("h4",{attrs:{id:"returning-the-status-of-a-settlement"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#returning-the-status-of-a-settlement"}},[e._v("#")]),e._v(" Returning the status of a settlement")]),e._v(" "),n("p",[e._v("The existing API definition "),n("sup",[n("a",{attrs:{href:"https://github.com/mojaloop/central-settlement/blob/master/src/interface/swagger.json",target:"_blank",rel:"noopener noreferrer"}},[e._v("2"),n("OutboundLink")],1)]),e._v(" supports a "),n("strong",[e._v("getSettlementById")]),e._v("\nresource. This function allows its user to obtain information about a settlement\nby giving the ID that was returned when the settlement was created.")]),e._v(" "),n("p",[e._v("Information about settlements is returned in a "),n("strong",[e._v("Settlement")]),e._v(" object. A\nparameter should be added to the Settlement object to record the settlement\nmodel which is being settled by the settlement.")]),e._v(" "),n("p",[e._v("The parameter should be called "),n("em",[e._v("settlementModel")]),e._v(", and it should be a string. It\nshould be required.")]),e._v(" "),n("p",[n("strong",[e._v("Note")]),e._v(": when a settlement is requested, a reason is given; but the\n"),n("strong",[e._v("Settlement")]),e._v(" object does not contain the reason. It might be worth including\nthis in the definition of the "),n("strong",[e._v("Settlement")]),e._v(" object.")]),e._v(" "),n("h4",{attrs:{id:"getting-information-about-settlements-using-parameters"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#getting-information-about-settlements-using-parameters"}},[e._v("#")]),e._v(" Getting information about settlements using parameters")]),e._v(" "),n("p",[e._v("The existing API definition"),n("sup",[n("a",{attrs:{href:"https://github.com/mojaloop/central-settlement/blob/master/src/interface/swagger.json",target:"_blank",rel:"noopener noreferrer"}},[e._v("2"),n("OutboundLink")],1)]),e._v(" supports a\n"),n("strong",[e._v("getSettlementsByParams")]),e._v(" resource. This function allows its user to obtain\ninformation about all settlements by giving the ID that was returned when the\nsettlement was created. The following changes will need to be made to this call:")]),e._v(" "),n("ol",[n("li",[e._v("This call returns an array of "),n("strong",[e._v("Settlement")]),e._v(" objects. It is assumed that\nthese objects will have been changed by the changes specified in Section\n6.2.2.5 above, and that no further processing will be required for this\ncall.")])]),e._v(" "),n("h4",{attrs:{id:"getting-information-about-a-specific-participant-in-a-settlement"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#getting-information-about-a-specific-participant-in-a-settlement"}},[e._v("#")]),e._v(" Getting information about a specific participant in a settlement")]),e._v(" "),n("p",[e._v("The existing API definition "),n("sup",[n("a",{attrs:{href:"https://github.com/mojaloop/central-settlement/blob/master/src/interface/swagger.json",target:"_blank",rel:"noopener noreferrer"}},[e._v("2"),n("OutboundLink")],1)]),e._v("  supports a\n"),n("strong",[e._v("getSettlementBySettlementParticipant")]),e._v(" resource. This function allows its user\nto obtain information about a settlement which meet the criteria specified by\nthe user. The following changes will need to be made to this call:")]),e._v(" "),n("ol",[n("li",[e._v("This call returns a "),n("strong",[e._v("Settlement")]),e._v(" object. It is assumed that this object\nwill have been changed by the changes specified in Section 6.2.2.5 above,\nand that no further processing will be required for this call.")])]),e._v(" "),n("h4",{attrs:{id:"updating-a-specific-settlement"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#updating-a-specific-settlement"}},[e._v("#")]),e._v(" Updating a specific settlement")]),e._v(" "),n("p",[e._v("The existing API definition "),n("sup",[n("a",{attrs:{href:"https://github.com/mojaloop/central-settlement/blob/master/src/interface/swagger.json",target:"_blank",rel:"noopener noreferrer"}},[e._v("2"),n("OutboundLink")],1)]),e._v(" supports an\n"),n("strong",[e._v("updateSettlementById")]),e._v(" resource. This function allows its user to update\ninformation about a settlement by giving the ID that was returned when the\nsettlement was created.")]),e._v(" "),n("p",[e._v("This call returns a "),n("strong",[e._v("Settlement")]),e._v(" object. It is assumed that this object will\nhave been changed by the changes specified in Section 6.2.2.5 above, and that no\nfurther processing will be required for this call.")]),e._v(" "),n("h4",{attrs:{id:"updating-a-settlement-for-a-specific-participant"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#updating-a-settlement-for-a-specific-participant"}},[e._v("#")]),e._v(" Updating a settlement for a specific participant")]),e._v(" "),n("p",[e._v("The existing API definition "),n("sup",[n("a",{attrs:{href:"https://github.com/mojaloop/central-settlement/blob/master/src/interface/swagger.json",target:"_blank",rel:"noopener noreferrer"}},[e._v("2"),n("OutboundLink")],1)]),e._v(" supports an\n"),n("strong",[e._v("updateSettlementBySettlementParticipant")]),e._v(" resource. This function allows its\nuser to update information about a settlement by giving the ID that was returned\nwhen the settlement was created, and the participant whose information is to be\nupdated.")]),e._v(" "),n("p",[e._v("This call returns a "),n("strong",[e._v("Settlement")]),e._v(" object. It is assumed that this object will\nhave been changed by the changes specified in Section 6.2.2.5 above, and that no\nfurther processing will be required for this call.")]),e._v(" "),n("h4",{attrs:{id:"updating-a-settlement-for-a-specific-participant-and-account"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#updating-a-settlement-for-a-specific-participant-and-account"}},[e._v("#")]),e._v(" Updating a settlement for a specific participant and account")]),e._v(" "),n("p",[e._v("The existing API definition "),n("sup",[n("a",{attrs:{href:"https://github.com/mojaloop/central-settlement/blob/master/src/interface/swagger.json",target:"_blank",rel:"noopener noreferrer"}},[e._v("2"),n("OutboundLink")],1)]),e._v(" supports an\n"),n("strong",[e._v("updateSettlementBySettlementParticipantAccount")]),e._v(" resource. This function\nallows its user to update information about a settlement by giving the ID that\nwas returned when the settlement was created, and the participant and account\nwhose information is to be updated.")]),e._v(" "),n("p",[e._v("This call returns a "),n("strong",[e._v("Settlement")]),e._v(" object. It is assumed that this object will\nhave been changed by the changes specified in Section 6.2.2.5 above, and that no\nfurther processing will be required for this call.")]),e._v(" "),n("h4",{attrs:{id:"recording-the-deposit-of-funds-by-a-participant"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#recording-the-deposit-of-funds-by-a-participant"}},[e._v("#")]),e._v(" Recording the deposit of funds by a participant")]),e._v(" "),n("p",[e._v("The existing administration API "),n("sup",[n("a",{attrs:{href:"https://mojaloop.io/documentation/api/central-ledger-api-specification.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("3"),n("OutboundLink")],1)]),e._v(" contains functions to enable\nan administrator to record a deposit made by a participant to an account. This\nprocess is described in Section 5.2 above. The API should be changed to align it\nwith the structures used in the existing settlement API "),n("sup",[n("a",{attrs:{href:"https://github.com/mojaloop/central-settlement/blob/master/src/interface/swagger.json",target:"_blank",rel:"noopener noreferrer"}},[e._v("2"),n("OutboundLink")],1)]),e._v(". In addition, the signature of the API should be extended to allow the\nadministrator to specify the account type that will be updated by the deposit.")]),e._v(" "),n("h4",{attrs:{id:"recording-the-withdrawal-of-funds-by-a-participant"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#recording-the-withdrawal-of-funds-by-a-participant"}},[e._v("#")]),e._v(" Recording the withdrawal of funds by a participant")]),e._v(" "),n("p",[e._v("The existing administration API "),n("sup",[n("a",{attrs:{href:"https://mojaloop.io/documentation/api/central-ledger-api-specification.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("3"),n("OutboundLink")],1)]),e._v(" contains functions to enable\nan administrator to record a withdrawal made by a participant from an account.\nThis process is described in Section 5.3 above. The API should be changed to\nalign it with the structures used in the existing settlement API "),n("sup",[n("a",{attrs:{href:"https://github.com/mojaloop/central-settlement/blob/master/src/interface/swagger.json",target:"_blank",rel:"noopener noreferrer"}},[e._v("2"),n("OutboundLink")],1)]),e._v(". In addition, the signature of the API should be extended to allow\nthe administrator to specify the account type that will be updated by the\nwithdrawal.")]),e._v(" "),n("h4",{attrs:{id:"new-resource-opensettlementwindow"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#new-resource-opensettlementwindow"}},[e._v("#")]),e._v(" New resource: openSettlementWindow")]),e._v(" "),n("p",[e._v("In the current architecture, an instance of each settlement window is created\nwhen the instance is set up, and subsequent settlement windows are created by\nclosing the current settlement window. In the new settlement management\nstructure, we will need the ability to create new settlement windows where no\npredecessors exist: for instance, when an administrator decides to settle a\nparticular currency using a different settlement model.")]),e._v(" "),n("h3",{attrs:{id:"processing-changes"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#processing-changes"}},[e._v("#")]),e._v(" Processing changes")]),e._v(" "),n("p",[e._v("The following processing changes are required to implement the changes required\nto support continuous gross settlement.")]),e._v(" "),n("h4",{attrs:{id:"attributing-ledger-entries-to-the-correct-ledger-account-type"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#attributing-ledger-entries-to-the-correct-ledger-account-type"}},[e._v("#")]),e._v(" Attributing ledger entries to the correct ledger account type")]),e._v(" "),n("p",[e._v("When a ledger entry is created, it should be assigned to the ledger account type\nspecified in the "),n("em",[e._v("ledgeraccounttypeid")]),e._v(" column of the row in the\n"),n("strong",[e._v("ledgerentrytype")]),e._v(" table appropriate to the ledger entry type which is being\ncreated.")]),e._v(" "),n("p",[e._v("For example: if a normal entry representing a transfer is being created, it will\nhave a ledger entry type of PRINCIPAL_VALUE. It should be assigned to the\nPOSITION account type (the default position at present.) This implies that the\nmatch described in Section 6.2.1.3 above has been implemented.")]),e._v(" "),n("p",[e._v("Question: how does the switch decide whether or when to construct a record in\nthe "),n("strong",[e._v("participantPositionChange")]),e._v(" table? How would it be possible to select the\nledger account type to which the position refers?")]),e._v(" "),n("h2",{attrs:{id:"processing-interchange-fees"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#processing-interchange-fees"}},[e._v("#")]),e._v(" Processing interchange fees")]),e._v(" "),n("p",[e._v("In order to support the scheme model implemented by TIPS, we need to generate\nand settle liabilities incurred as a consequence of making transfers between\nparticular types of customer. The general form of this rule is as follows:")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("If the transaction is a wallet-to-wallet P2P transaction, then the receiver\nDFSP pays the sender DFSP 0.6% of the amount of the transaction.")])]),e._v(" "),n("li",[n("p",[e._v("No interchange fees are levied for on-us transactions.")])])]),e._v(" "),n("p",[e._v("The business decisions around this requirement are:")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("The definition of whether or not a payee account is a wallet will be\nreturned by the payee DFSP as part of customer discovery. The mechanism by\nwhich this is implemented is outside the scope of this document.")])]),e._v(" "),n("li",[n("p",[e._v("Interchange fees will be captured by the switch when the transfers which\nincur them are completed.")])]),e._v(" "),n("li",[n("p",[e._v("Interchange fees will have the ledger entry type INTERCHANGE_FEE and will be\nrecorded in accounts whose type is INTERCHANGE_FEE.")])]),e._v(" "),n("li",[n("p",[e._v("Interchange fees will be settled multilaterally, net and deferred. It is\nexpected that this settlement will take place monthly.")])]),e._v(" "),n("li",[n("p",[e._v("Interchange fees do not require liability cover by participants.")])])]),e._v(" "),n("p",[e._v("This functionality will be implemented as a partial instance of a general\nprocess for defining and executing rules, and for taking actions based on the\noutcome of evaluation of a rule. For this particular case, we propose the\nchanges described in the following sections.")]),e._v(" "),n("h3",{attrs:{id:"part-1-run-script-for-batch-update-of-interchange-fees-when-settlement-window-is-closed"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#part-1-run-script-for-batch-update-of-interchange-fees-when-settlement-window-is-closed"}},[e._v("#")]),e._v(" Part 1: Run script for batch update of interchange fees when settlement window is closed.")]),e._v(" "),n("p",[e._v("Include stories to manage account type definition")]),e._v(" "),n("h3",{attrs:{id:"part-2-add-reservation-on-prepare-using-script-and-modify-fulfilment-to-fulfil-all-ledger-types-for-which-an-entry-has-been-made"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#part-2-add-reservation-on-prepare-using-script-and-modify-fulfilment-to-fulfil-all-ledger-types-for-which-an-entry-has-been-made"}},[e._v("#")]),e._v(" Part 2: Add reservation on prepare using script and modify fulfilment to fulfil all ledger types for which an entry has been made")]),e._v(" "),n("h3",{attrs:{id:"evaluating-a-rule"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#evaluating-a-rule"}},[e._v("#")]),e._v(" Evaluating a rule")]),e._v(" "),n("p",[e._v("The process of evaluating a rule is based on the following assumptions:")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("There will be a standard form of rule evaluation with the following\nstructure:")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("A transaction object will be passed as the parameter to the rule\nevaluation function.")])]),e._v(" "),n("li",[n("p",[e._v("The rule evaluation itself will use a complex if statement.")])]),e._v(" "),n("li",[n("p",[e._v("If the rule evaluates to TRUE, then an action should be executed as\ndescribed in Section 6.3.2 below.")])])])])]),e._v(" "),n("p",[e._v("An example of a rule function to evaluate a TIPS interchange fee rule could be:")]),e._v(" "),n("p",[e._v("function evaluateInterchangeFee (transaction) {")]),e._v(" "),n("p",[e._v("if(")]),e._v(" "),n("p",[e._v("(transaction.payee.fspId.toLowerCase() != transaction.payer.fspId.toLowerCase())")]),e._v(" "),n("p",[e._v('&& (transaction.extensionList[“payerAccountType”].toLowerCase() ==\n"Wallet".toLowerCase()')]),e._v(" "),n("p",[e._v('&& transaction.extensionList[“payeeAccountType”].toLowerCase() ==\n"Wallet".toLowerCase())')]),e._v(" "),n("p",[e._v('&& (transaction.transactionType.scenario.toLowerCase() ==\n"TRANSFER".toLowerCase()')]),e._v(" "),n("p",[e._v('&& transaction.transactionType.initiator.toLowerCase() == "PAYER".toLowerCase()')]),e._v(" "),n("p",[e._v('&& transaction.transactionType.initiatorType.toLowerCase() ==\n"CONSUMER".toLowerCase())')]),e._v(" "),n("p",[e._v(") {")]),e._v(" "),n("p",[e._v("// Do some good stuff")]),e._v(" "),n("p",[e._v("};")]),e._v(" "),n("p",[e._v("};")]),e._v(" "),n("h3",{attrs:{id:"taking-action-after-evaluating-a-rule"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#taking-action-after-evaluating-a-rule"}},[e._v("#")]),e._v(" Taking action after evaluating a rule")]),e._v(" "),n("p",[e._v("If a rule evaluates to TRUE as described in Section 6.3.1 above, then\nappropriate action should be taken. In the case of the immediate example of\ninterchange fees, the action taken should be to add two entries to the\nparticipants’ interchange fee accounts, on recording the debit from the payee of\nthe interchange fee amount and the other recording the credit to the payer of\nthe interchange fee amount.")]),e._v(" "),n("p",[e._v("A simple yet general way of supporting actions of this type is to define a class\n(which might be called ruleAction) and adding methods to it to represent the\nactions to be taken. The rule evaluation function can then instantiate the class\nand call the appropriate function.")]),e._v(" "),n("p",[e._v("In the case of the interchange fees, we would define an action called\naddLedgerEntry, with the following parameters:")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("The transfer ID for which the ledger entry is being created")])]),e._v(" "),n("li",[n("p",[e._v("The ledger entry type to be used")])]),e._v(" "),n("li",[n("p",[e._v("The currency in which the amount is denominated")])]),e._v(" "),n("li",[n("p",[e._v("The amount of the fee")])]),e._v(" "),n("li",[n("p",[e._v("The FSP ID of the credit party")])]),e._v(" "),n("li",[n("p",[e._v("The FSP ID of the debit party")])])]),e._v(" "),n("p",[e._v("This might appear in the rule evaluation function as:")]),e._v(" "),n("p",[e._v("myAction.addLedgerEntry(transaction.transactionId,")]),e._v(" "),n("p",[e._v("transaction.transactionId,")]),e._v(" "),n("p",[e._v('"INTERCHANGE_FEE“,')]),e._v(" "),n("p",[e._v("transaction.currency,")]),e._v(" "),n("p",[e._v("transaction.amount*0.006,")]),e._v(" "),n("p",[e._v("transaction.payer.fspId,")]),e._v(" "),n("p",[e._v("transaction.payee.fspId);")]),e._v(" "),n("h3",{attrs:{id:"providing-a-generic-framework-for-rule-evaluation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#providing-a-generic-framework-for-rule-evaluation"}},[e._v("#")]),e._v(" Providing a generic framework for rule evaluation")]),e._v(" "),n("p",[e._v("Finally, we will need to provide a generic framework to trigger the evaluation\nof rules. This should be an array of evaluation functions, which are triggered\nwhen the status of a transfer changes to FULFILLED.")]),e._v(" "),n("h2",{attrs:{id:"process-transfers-for-continuous-gross-settlement-epic"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#process-transfers-for-continuous-gross-settlement-epic"}},[e._v("#")]),e._v(" Process transfers for continuous gross settlement [EPIC]")]),e._v(" "),n("p",[e._v("When a settlement model specifies that an account is to be settled immediate gross, then each ledger entry which is of a type belonging to that scheme account should be settled immediately. This immediate settlement should have the following characteristics:")]),e._v(" "),n("ul",[n("li",[e._v("It should be performed by a process which is forensically logged.")]),e._v(" "),n("li",[e._v("It should be performed immediately, so that participants can check their current position against the transfers that comprise it.")]),e._v(" "),n("li",[e._v("It should be aggregated to settlement window level, so that the checks which are currently performed on the overall status of a settlement window will continue to work.")])]),e._v(" "),n("p",[e._v("The following sections describe the changes that are required to process transfers for accounts which are settled immediate gross.")]),e._v(" "),n("h3",{attrs:{id:"database-changes-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#database-changes-3"}},[e._v("#")]),e._v(" Database changes")]),e._v(" "),n("p",[e._v("The following changes are required to the database to implement transfer processing for continuous gross settlement")]),e._v(" "),n("h4",{attrs:{id:"addition-of-a-new-table-to-store-changes-in-state"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#addition-of-a-new-table-to-store-changes-in-state"}},[e._v("#")]),e._v(" Addition of a new table to store changes in state")]),e._v(" "),n("p",[e._v("A new table should be added to store changes in state for ledger entries for individual transfers. The name of this table should be "),n("strong",[e._v("transferParticipantStateChange")]),e._v(". Its column structure should be as follows:")]),e._v(" "),n("ol",[n("li",[e._v("The unique key to the record. Column name: "),n("strong",[e._v("transferParticipantStateChangeId")]),e._v("; type: unsigned BIGINT; not nullable; primary key")]),e._v(" "),n("li",[e._v("The record in "),n("strong",[e._v("TransferParticipant")]),e._v(" whose state change this record marks. Column name: "),n("strong",[e._v("transferParticipantId")]),e._v("; type: unsigned BIGINT; not nullable; foreign key to the "),n("strong",[e._v("transferParticipantId")]),e._v(" column of the "),n("strong",[e._v("transferParticipant")]),e._v(" table.")]),e._v(" "),n("li",[e._v("The current state of the record in "),n("strong",[e._v("transferParticipant")]),e._v(" to which this state record refers. Column name: "),n("strong",[e._v("settlementWindowStateId")]),e._v("; data type VARCHAR(50); not nullable; foreign key to the "),n("strong",[e._v("settlementWindowStateId")]),e._v(" column of the "),n("strong",[e._v("settlementWindowState")]),e._v(" table.")]),e._v(" "),n("li",[e._v("An explanation of the state change. Column name: "),n("strong",[e._v("reason")]),e._v("; type: VARCHAR(512); nullable.")]),e._v(" "),n("li",[e._v("The date and time when the change was recorded. Column name: "),n("strong",[e._v("createdDate")]),e._v("; type DATETIME; not nullable; default value "),n("strong",[e._v("CURRENT_TIMESTAMP")]),e._v(".")])]),e._v(" "),n("h4",{attrs:{id:"changes-to-the-transferparticipant-table"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#changes-to-the-transferparticipant-table"}},[e._v("#")]),e._v(" Changes to the TransferParticipant table")]),e._v(" "),n("p",[e._v("No changes to the "),n("strong",[e._v("transferParticipant")]),e._v(" table are required. The relationship between records in the "),n("strong",[e._v("transferParticipant")]),e._v(" table and records in the "),n("strong",[e._v("transferParticipantStateChange")]),e._v(" table is managed via the "),n("strong",[e._v("transferParticipantId")]),e._v(" column in the "),n("strong",[e._v("transferParticipantStateChange")]),e._v(" table.")]),e._v(" "),n("h4",{attrs:{id:"changes-to-the-settlementmodel-table"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#changes-to-the-settlementmodel-table"}},[e._v("#")]),e._v(" Changes to the settlementModel table")]),e._v(" "),n("p",[e._v("Existing implementations have functionality which automatically adjusts participants' positions when settlements are completed. In order to support backwards compatibility for these implementations, the settlement model will be expanded to allow automated position adjustment to be switched off and on.")]),e._v(" "),n("p",[e._v("This functionality will be managed through a new column in the "),n("strong",[e._v("settlementModel")]),e._v(" table. The name of the column will be "),n("strong",[e._v("adjustPosition")]),e._v(". Its type will be TINYINT(1), and it should not be nullable. It should have a default value of zero (FALSE).")]),e._v(" "),n("h3",{attrs:{id:"processing-changes-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#processing-changes-2"}},[e._v("#")]),e._v(" Processing changes")]),e._v(" "),n("p",[e._v("The following changes to processing are required to support immediate settlement of gross ledger entries.")]),e._v(" "),n("h4",{attrs:{id:"generating-entries-in-settlementcontentaggregation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#generating-entries-in-settlementcontentaggregation"}},[e._v("#")]),e._v(" Generating entries in settlementContentAggregation")]),e._v(" "),n("p",[e._v("The following changes to the process that creates aggregation records in the "),n("strong",[e._v("settlementContentAggregation")]),e._v(" table are required.")]),e._v(" "),n("ol",[n("li",[e._v("The aggregation process for a settlement window may not be performed if there are any records in the "),n("strong",[e._v("transferParticipant")]),e._v(" table which belong to the settlement window to be aggregated (as defined by joining the "),n("strong",[e._v("transferParticipant")]),e._v(" records to the matching records in the "),n("strong",[e._v("transferFulfilment")]),e._v(" table on the "),n("strong",[e._v("transferId")]),e._v(" column in both tables) and which do not have any corresponding entries in the "),n("strong",[e._v("transferParticipantStateChange")]),e._v(" table. This test is performed via a LEFT OUTER JOIN relationship between the "),n("strong",[e._v("transferParticipantStateChange")]),e._v(" table and the "),n("strong",[e._v("transferParticipant")]),e._v(" table, using the foregin key relation between the "),n("strong",[e._v("transferParticipantId")]),e._v(" columns in the "),n("strong",[e._v("transferParticipant")]),e._v(" table and the "),n("strong",[e._v("transferParticipantStateChange")]),e._v(" table.")]),e._v(" "),n("li",[e._v("In the discussion which follows, the current status of a record in "),n("strong",[e._v("transferParticipant")]),e._v(" is defined as: the status of the record in the "),n("strong",[e._v("transferParticipantStateChange")]),e._v(" table which is keyed to the record in "),n("strong",[e._v("transferParticipant")]),e._v(" and which has the latest value in the "),n("strong",[e._v("createdDate")]),e._v(" column of the "),n("strong",[e._v("transferParticipantStateChange")]),e._v(" table.")]),e._v(" "),n("li",[e._v("When there are no records in "),n("strong",[e._v("transferParticipant")]),e._v(" which meet the blocking criteria described in step 1 above, then all records belonging to the settlement window which has just been closed, and which currently have the status OPEN, should have their status set to CLOSED. This means: a record should be added to the "),n("strong",[e._v("transferParticipantStateChange")]),e._v(" table for the qualifying "),n("strong",[e._v("transferParticipant")]),e._v(" record whose status is CLOSED, and the "),n("strong",[e._v("currentStateChangeId")]),e._v(" column for the qualifying "),n("strong",[e._v("transferParticipant")]),e._v(" record should be set to point to the newly created record.")]),e._v(" "),n("li",[e._v("When aggregating records for insertion into the "),n("strong",[e._v("settlementContentAggregation")]),e._v(" table, if all the records in the "),n("strong",[e._v("transferParticipant")]),e._v(" table which are to be aggregated into a single record in the "),n("strong",[e._v("settlementContentAggregation")]),e._v(" table have the same value in their "),n("strong",[e._v("currentStateChangeId")]),e._v(" column, then the value of the "),n("strong",[e._v("currentStateId")]),e._v(" column in the newly created record in the "),n("strong",[e._v("settlementContentAggregation")]),e._v(" table should be set as follows. The value of the "),n("strong",[e._v("currentStateId")]),e._v(" column in the newly created record in the "),n("strong",[e._v("settlementContentAggregation")]),e._v(" table should be set to the shared value in the constituent records from the "),n("strong",[e._v("transferParticipant")]),e._v(" table, except in the following case: if the shared value in the constituent records from the "),n("strong",[e._v("transferParticipant")]),e._v(" table is OPEN, then the value of the "),n("strong",[e._v("currentStateId")]),e._v(" column should be set to the value CLOSED.")])]),e._v(" "),n("h4",{attrs:{id:"marking-transfers-as-settled"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#marking-transfers-as-settled"}},[e._v("#")]),e._v(" Marking transfers as settled")]),e._v(" "),n("p",[e._v("The following additional processes are required in order to mark ledger entries which are settled immediate gross as having been settled.")]),e._v(" "),n("h5",{attrs:{id:"queueing-transfers-for-settlement-processing"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#queueing-transfers-for-settlement-processing"}},[e._v("#")]),e._v(" Queueing transfers for settlement processing")]),e._v(" "),n("p",[e._v("When a transfer is completed, a record is generated in the "),n("strong",[e._v("transferFulfilment")]),e._v(" table. As part of the process that generates this record, the transfer should be placed on a Kafka stream for immediate settlement processing.")]),e._v(" "),n("h5",{attrs:{id:"processing-settlements"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#processing-settlements"}},[e._v("#")]),e._v(" Processing settlements")]),e._v(" "),n("p",[e._v("A new service should be developed for processing gross (i.e. per-transfer) settlements. The requirements for this service are as follows:")]),e._v(" "),n("ol",[n("li",[e._v("It should enable an auditor to verify that a given transfer has been settled using the agreed process")]),e._v(" "),n("li",[e._v("It should allow transfer settlement to be recorded either internally, using an automatic process, or externally, exporting the information for each transfer to be settled to a configurable endpoint.")]),e._v(" "),n("li",[e._v("It should not delay processing of the transfer itself")])]),e._v(" "),n("p",[e._v("The characteristics of the service should be as follows:")]),e._v(" "),n("ol",[n("li",[e._v("Pick a transfer from the Kafka stream holding transfers awaiting settlement processing. There is no requirement for sequence preservation, so this service can pick up multiple transfer entries if this would accelerate processing.")]),e._v(" "),n("li",[e._v("For each record in the "),n("strong",[e._v("transferParticipant")]),e._v(" table which belongs to the transfer "),n("em",[e._v("and")]),e._v(" whose "),n("strong",[e._v("ledgerEntryType")]),e._v(" column specifies a ledger entry type which belongs to a settlement model which is settled both GROSS and IMMEDIATE, the service should generate consecutive records in the "),n("strong",[e._v("transferParticipantStateChange")]),e._v(" table with the values: CLOSED, PENDING_SETTLEMENT, and SETTLED, in that order. The "),n("strong",[e._v("currentStateChangeId")]),e._v(" column for the record in the "),n("strong",[e._v("transferParticipant")]),e._v(" table should be set to point to the record in the "),n("strong",[e._v("transferParticipantStateChange")]),e._v(" table whose value is SETTLED.")]),e._v(" "),n("li",[e._v("For each record in the "),n("strong",[e._v("transferParticipant")]),e._v(" table which belongs to the transfer "),n("em",[e._v("and")]),e._v(" whose "),n("strong",[e._v("ledgerEntryType")]),e._v(" column specifies a ledger entry type which belongs to a settlement model which is settled both GROSS and IMMEDIATE "),n("em",[e._v("and")]),e._v(" where the settlement model has an export endpoint configured, the process should export the information relating to the entry that is being settled to the endpoint specified in an agreed format. The format to be used, the means of specifying the endpoint to be addressed, and the process by which exports are generated and acknowledged, are not specified at this time.")]),e._v(" "),n("li",[e._v("For all other records in the "),n("strong",[e._v("transferParticipant")]),e._v(" table which belong to the transfer, the service should generate a record in the "),n("strong",[e._v("transferParticipantStateChange")]),e._v(" table with a value of OPEN. The "),n("strong",[e._v("currentStateChangeId")]),e._v(" column for the record in the "),n("strong",[e._v("transferParticipant")]),e._v(" table should be set to point to the record in the "),n("strong",[e._v("transferParticipantStateChange")]),e._v(" table which was created.")])]),e._v(" "),n("h4",{attrs:{id:"updating-status-values-for-net-settlements"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#updating-status-values-for-net-settlements"}},[e._v("#")]),e._v(" Updating status values for net settlements")]),e._v(" "),n("p",[e._v("When the status is updated for a participant in a settlement which belongs to a settlement model which is not settled both GROSS and IMMEDIATE, then the constituent records for that participant in the settlement in the "),n("strong",[e._v("transferParticipant")]),e._v(" table need to be updated. The rules for this are:")]),e._v(" "),n("ol",[n("li",[e._v("When the settlement is created, all the records in "),n("strong",[e._v("transferParticipant")]),e._v(" which belong to a transfer which belongs to a window which belongs to the settlement being created (i.e. which are contained in the inner join between "),n("strong",[e._v("transferParticipant")]),e._v(", "),n("strong",[e._v("transferfulfilment")]),e._v(" (on "),n("strong",[e._v("transferId")]),e._v(") and "),n("strong",[e._v("settlementSettlementWindow")]),e._v(" (on "),n("strong",[e._v("settlementWindowId")]),e._v(") for the settlement Id which is being created) should have a record created in "),n("strong",[e._v("settlementContentAggregationStateChange")]),e._v(" with the "),n("strong",[e._v("settlementWindowStateId")]),e._v(" column set to PENDING_SETTLEMENT.")]),e._v(" "),n("li",[e._v("When a participant's settlement status is updated to SETTLED in "),n("strong",[e._v("settlementParticipantCurrency")]),e._v(", then all the records in "),n("strong",[e._v("transferParticipant")]),e._v(" for settlement windows which belong to that settlement, and whose participant and currency IDs match the participant and currency of the records in "),n("strong",[e._v("settlementParticipantCurrency")]),e._v(" which have been updated, should have their status set to SETTLED.")])]),e._v(" "),n("h4",{attrs:{id:"gross-settlement-and-position-management"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#gross-settlement-and-position-management"}},[e._v("#")]),e._v(" Gross settlement and position management")]),e._v(" "),n("p",[e._v("If gross settlement is enabled for a settlement model and that settlement model also has its "),n("strong",[e._v("adjustPosition")]),e._v(" flag set to TRUE, then an adjustment to both participants' positions should be made. This should be done in the following way:")]),e._v(" "),n("ol",[n("li",[e._v("For each record in the "),n("strong",[e._v("transferParticipant")]),e._v(" table which is being settled, create a record in the "),n("strong",[e._v("participantPositionChange")]),e._v(" table with the following characteristics:\na.  The "),n("strong",[e._v("participantPositionId")]),e._v(" column should be set to the value of the "),n("strong",[e._v("participantPositionId")]),e._v(" column in the "),n("strong",[e._v("participantPosition")]),e._v(" table for the record whose "),n("strong",[e._v("participantCurrencyId")]),e._v(" field is the same as that of the record in the "),n("strong",[e._v("transferParticipant")]),e._v(" table which has been settled.\nb.  The "),n("strong",[e._v("transferStateChangeId")]),e._v(" column should be set to the value of the "),n("strong",[e._v("transferStateChangeId")]),e._v(" column for the record in the "),n("strong",[e._v("transferStateChange")]),e._v(" table whose "),n("strong",[e._v("transferId")]),e._v(" column is the same as the value of the "),n("strong",[e._v("transferId")]),e._v(" column in the "),n("strong",[e._v("transferParticipant")]),e._v(" table for the record which is being settled, and which has the latet value in its "),n("strong",[e._v("createdDate")]),e._v(" column.\nc.  The "),n("strong",[e._v("value")]),e._v(" column should be set to the "),n("strong",[e._v("amount")]),e._v(" column in the "),n("strong",[e._v("transferParticipant")]),e._v(" table for the record which is being settled.\nd.  The "),n("strong",[e._v("reservedValue")]),e._v(" column should be set to zero.\ne.  The "),n("strong",[e._v("createdDate")]),e._v(" column should be set to the current date and time.")]),e._v(" "),n("li",[e._v("The record in the "),n("strong",[e._v("participantPosition")]),e._v(" table whose "),n("strong",[e._v("participantCurrencyId")]),e._v(" field matches that of the record in the "),n("strong",[e._v("transferParticipant")]),e._v(" table which has been settled should have the "),n("strong",[e._v("amount")]),e._v(" column of the corresponding record in the "),n("strong",[e._v("transferParticipant")]),e._v(" table added to its "),n("strong",[e._v("value")]),e._v(" column.")])]),e._v(" "),n("h1",{attrs:{id:"domain-class-diagram"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#domain-class-diagram"}},[e._v("#")]),e._v(" Domain class diagram")]),e._v(" "),n("h1",{attrs:{id:"erd"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#erd"}},[e._v("#")]),e._v(" ERD")]),e._v(" "),n("p",[e._v("The following ERD describes the new data structures required to model settlements.")]),e._v(" "),n("p",[n("img",{attrs:{src:"/mojaloop-technical-overview/central-settlements/assets/diagrams/Settlement_ERD.png",alt:""}})]),e._v(" "),n("h2",{attrs:{id:"enumerations"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#enumerations"}},[e._v("#")]),e._v(" Enumerations")]),e._v(" "),n("p",[e._v("The following enumerations are required to support the new ERD:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("DELETE FROM settlementGranularity;\nINSERT INTO settlementGranularity (name)\nVALUES ('GROSS'), ('NET');\n\nDELETE FROM settlementInterchange;\nINSERT INTO settlementInterchange (name)\nVALUES ('BILATERAL'), ('MULTILATERAL');\n\nDELETE FROM settlementDelay;\nINSERT INTO settlementDelay(name)\nVALUES ('IMMEDIATE'), ('DEFERRED');\n")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);