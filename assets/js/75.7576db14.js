(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{450:function(s,a,t){"use strict";t.r(a);var e=t(43),n=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"mojaloop-setup-for-linux-ubuntu"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mojaloop-setup-for-linux-ubuntu"}},[s._v("#")]),s._v(" Mojaloop Setup for Linux (Ubuntu)")]),s._v(" "),t("p",[s._v("Local setup on a Laptop or Desktop to run the Mojaloop project.")]),s._v(" "),t("TOC"),s._v(" "),t("h2",{attrs:{id:"setup-introduction"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#setup-introduction"}},[s._v("#")]),s._v(" Setup Introduction")]),s._v(" "),t("p",[s._v("This document will provide guidelines to a technical capable resources to setup, deploy and configure the Mojaloop applications on a local environment, utilizing Docker, Kubernetes and HELM charts.")]),s._v(" "),t("p",[s._v("At this point the reader/implementer should be familiar with "),t("RouterLink",{attrs:{to:"/deployment-guide/"}},[s._v("Mojaloop's deployment guide")]),s._v(". Imported information is contained in that document and as such a prerequisite to this document.")],1),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#1-environment-recommendations"}},[s._v("Environment recommendations")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#2-kubernetes"}},[s._v("Kubernetes")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#21-microk8s"}},[s._v("MicroK8S")])])])]),s._v(" "),t("li",[t("a",{attrs:{href:"#12-docker"}},[s._v("Docker")])])])]),s._v(" "),t("li",[t("a",{attrs:{href:"#2-useful-tips"}},[s._v("Useful Tips")])])]),s._v(" "),t("h2",{attrs:{id:"_1-environment-recommendations"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-environment-recommendations"}},[s._v("#")]),s._v(" 1. Environment recommendations")]),s._v(" "),t("p",[s._v("This environment setup was validated on:")]),s._v(" "),t("ul",[t("li",[s._v("64-bit version of Ubuntu Bionic 18.04(LTS).")]),s._v(" "),t("li",[s._v("This guide is based on Ubuntu 18.04.2 (bionic) on a x86_64 desktop with 8 CPU's and 16GB RAM.")])]),s._v(" "),t("h2",{attrs:{id:"_2-kubernetes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-kubernetes"}},[s._v("#")]),s._v(" 2. Kubernetes")]),s._v(" "),t("p",[s._v("Kubernetes installation for a local environment.")]),s._v(" "),t("h4",{attrs:{id:"_2-1-microk8s"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-microk8s"}},[s._v("#")]),s._v(" 2.1. MicroK8S")]),s._v(" "),t("p",[s._v("We recommend install directly from the snap store.")]),s._v(" "),t("p",[s._v("Don't have the snap command? "),t("a",{attrs:{href:"https://snapcraft.io/docs/core/install",target:"_blank",rel:"noopener noreferrer"}},[s._v("Install snapd first"),t("OutboundLink")],1),s._v(".")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("Installing MicroK8s from snap.")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("snap "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" microk8s --classic\n")])])]),t("p",[s._v("Specific version:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("snap "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" microk8s --classic --channel"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.16")]),s._v("/stable\n")])])])]),s._v(" "),t("li",[t("p",[s._v("Verify MicroK8s is installed and available.")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("microk8s.status\n")])])])]),s._v(" "),t("li",[t("p",[s._v("During installation you can use the --wait-ready flag to wait for the kubernetes services to initialise.")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("microk8s.status --wait -ready\n")])])])]),s._v(" "),t("li",[t("p",[s._v("To avoid colliding with a "),t("strong",[s._v("kubectl")]),s._v(" already installed and to avoid overwriting any existing Kubernetes configuration file, MicroK8s adds a "),t("strong",[s._v("microk8s.kubectl")]),s._v(" command, configured to exclusively access the new "),t("strong",[s._v("MicroK8s")]),s._v(" install.")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("microk8s.kubectl get services\n")])])])]),s._v(" "),t("li",[t("p",[s._v("This step is only necessary if you require "),t("strong",[s._v("microk8s.kubectl")]),s._v(" to function as a standard "),t("strong",[s._v("kubectl")]),s._v(" command. This "),t("strong",[s._v("DOES NOT")]),s._v(" mean that you can then use "),t("strong",[s._v("kubectl")]),s._v(" to access "),t("strong",[s._v("OTHER")]),s._v(" k8s clusters.")]),s._v(" "),t("p",[s._v("An example of why you would use this: You have a bash script or 3rd party tool that expects "),t("strong",[s._v("kubectl")]),s._v(" to be available. E.g. If you want to use Helm, it will not work against "),t("strong",[s._v("microk8s.kubectl")]),s._v(", thus one "),t("strong",[s._v("MUST")]),s._v(" setup the alias for Helm to function correctly.")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("snap "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("alias")]),s._v(" microk8s.kubectl kubectl\n")])])]),t("p",[s._v("Reverting it at any time;")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("snap "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("unalias")]),s._v(" kubectl\n")])])]),t("p",[s._v("We will stick with the standard command of prefixing with "),t("strong",[s._v("microk8s.")]),s._v(" for this guide.")])]),s._v(" "),t("li",[t("p",[s._v("If you already have "),t("strong",[s._v("kubectl")]),s._v(" installed and would like to use it to access the "),t("strong",[s._v("MicroK8s")]),s._v(" deployment.")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("microk8s.kubectl config view --raw "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$HOME")]),s._v("/.kube/config\n")])])])]),s._v(" "),t("li",[t("p",[s._v("View the current context.")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("microk8s.kubectl config get-contexts\n")])])])]),s._v(" "),t("li",[t("p",[s._v("Make sure the current context is "),t("strong",[s._v("microk8s")]),s._v(". If not, set it as the current context.")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("microk8s.kubectl config use-context microk8s\n")])])])]),s._v(" "),t("li",[t("p",[s._v("Install an Ingress Controller\nInstall an NGINX Ingress Controller for MicroK8s by running the command:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("microk8s "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("enable")]),s._v(" ingress\n")])])]),t("p",[s._v("Alternatively via Helm Charts:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("helm --namespace kube-public "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" stable/nginx-ingress\n")])])])])]),s._v(" "),t("h3",{attrs:{id:"_1-2-docker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-docker"}},[s._v("#")]),s._v(" 1.2. Docker")]),s._v(" "),t("p",[s._v("Docker is deployed as part of the MicroK8s installation. The docker daemon used by MicroK8s is listening on unix:///var/snap/microk8s/current/docker.sock. You can access it with the "),t("strong",[s._v("microk8s.docker")]),s._v(" command.")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("If you require "),t("strong",[s._v("microk8s.docker")]),s._v(" to function as a standard "),t("strong",[s._v("docker")]),s._v(" command, you set an alias.")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" snap "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("alias")]),s._v(" microk8s.docker docker\n")])])]),t("p",[s._v("Undo the alias;")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" snap "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("unalias")]),s._v(" docker\n")])])])]),s._v(" "),t("li",[t("p",[s._v("We will apply the native microK8s commands by prefix commands "),t("strong",[s._v("microk8s.")])]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("microk8s.docker "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v("\n")])])])]),s._v(" "),t("li",[t("p",[s._v("Continue setup and configuration from the Kubernetes Dashboard section in the "),t("RouterLink",{attrs:{to:"/deployment-guide/#31-kubernetes-dashboard"}},[s._v("Mojaloop's deployment guide")]),s._v(" document.")],1)])]),s._v(" "),t("h2",{attrs:{id:"_2-useful-tips"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-useful-tips"}},[s._v("#")]),s._v(" 2. Useful Tips")]),s._v(" "),t("ol",[t("li",[s._v("Resolve problems with VSCode and kafka on ubuntu 18.04. To make the code work with VSCode debugger, added the following into the launch.json"),t("div",{staticClass:"language-json extra-class"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"env"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"LD_LIBRARY_PATH"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"${workspaceFolder}/node_modules/node-rdkafka/build/deps"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"WITH_SASL"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])])])])],1)}),[],!1,null,null,null);a.default=n.exports}}]);