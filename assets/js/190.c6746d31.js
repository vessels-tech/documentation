(window.webpackJsonp=window.webpackJsonp||[]).push([[190],{587:function(e,t,a){"use strict";a.r(t);var n=a(43),s=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"sdk-scheme-adapter-and-wso2-api-gateway"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sdk-scheme-adapter-and-wso2-api-gateway"}},[e._v("#")]),e._v(" SDK Scheme Adapter and WSO2 API Gateway")]),e._v(" "),a("p",[e._v("This documentaion is for testing scheme adapter against a public hosted WSO2 API gateway with SSL encryption and bearer token authentication.")]),e._v(" "),a("p",[a("img",{attrs:{src:"scheme-adapter-and-wso2-api-gateway-overview.png",alt:"Overview"}})]),e._v(" "),a("h2",{attrs:{id:"prerequisite"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prerequisite"}},[e._v("#")]),e._v(" Prerequisite")]),e._v(" "),a("ul",[a("li",[e._v("Accesss to WSO2 API production api with a generated token.")]),e._v(" "),a("li",[e._v("sdk-scheme-adapter")]),e._v(" "),a("li",[e._v("mojaloop-simulator")])]),e._v(" "),a("h2",{attrs:{id:"generate-access-token-and-url-from-wso2-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#generate-access-token-and-url-from-wso2-api"}},[e._v("#")]),e._v(" Generate access token and URL from WSO2 API")]),e._v(" "),a("ul",[a("li",[e._v("Login to your WSO2 store and go to applications in the menu. Create a new application and access keys if you don't have those already.")]),e._v(" "),a("li",[e._v("Then go to APIs menu, you should find the following applications. Subscribe to these two APIs by selecting your application and tier from the each API main page.\n"),a("ul",[a("li",[e._v("Central Ledger Admin API - We will use this endpoint for creating a new fsp and configure endpoints for that fsp. (Please contact your infra team for the proper https endpoints, they need to provision them on the hub)")]),e._v(" "),a("li",[e._v("FSPIOP API - This is the main API for account lookup, quotes & transfers")])])]),e._v(" "),a("li",[e._v('You can try some api requests in "API Console" tab by selecting the generated access token.')]),e._v(" "),a("li",[e._v("Please make a note of the API URLs for both APIs and access token.")])]),e._v(" "),a("h2",{attrs:{id:"infrastructure-stuff"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#infrastructure-stuff"}},[e._v("#")]),e._v(" Infrastructure Stuff")]),e._v(" "),a("p",[e._v("The following are the things your infrastructure team should take care off.\nPlease contact your infra team for further details.")]),e._v(" "),a("ul",[a("li",[e._v("For getting back the responses, we need a machine with static public IP. And a domain name should be pointed to that IP.")]),e._v(" "),a("li",[e._v("Generate client and server SSL certificates using MCM portal and keychain tool. This step is to establish secure communication using mutual SSL.")]),e._v(" "),a("li",[e._v("Provision the endpoints pointing to your https address in WSO2 / HA Proxy.")]),e._v(" "),a("li",[e._v("Establish JWS authentication")]),e._v(" "),a("li",[a("strong",[e._v("AWS Deployment")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Launch an EC2 instance in AWS console")]),e._v(" "),a("ul",[a("li",[e._v("Create an EC2 instance in AWS console and select "),a("strong",[e._v("t2.micro")]),e._v(" instance type.")]),e._v(" "),a("li",[e._v("Select "),a("strong",[e._v("Ubuntu 18.04")]),e._v(" as your operating system.")]),e._v(" "),a("li",[e._v("After your instance is ready, you can connect to it using ssh and the downloaded key file from AWS EC2 dashboard.")]),e._v(" "),a("li",[e._v("Install docker and docker-compose in that EC2 instance")])])]),e._v(" "),a("li",[a("p",[e._v("Open 4000 TCP port in security groups and assign elastic IP")]),e._v(" "),a("ul",[a("li",[e._v("Add the inbound rule in security group of this EC2 instance that will expose the TCP 4000 port to public")]),e._v(" "),a("li",[e._v("Use Elastic IP service to assign a static IP for this instance")])])]),e._v(" "),a("li",[a("p",[e._v("Setup domain name for this instance")]),e._v(" "),a("ul",[a("li",[e._v("You can use route53 in aws or any other DNS service to point a DNS name to this IP address")]),e._v(" "),a("li",[e._v("This step is required because the Let's Encrypt certificate authority will not issue certificates for a bare IP address.")])])])])])]),e._v(" "),a("h2",{attrs:{id:"setting-up-scheme-adapter-with-mojaloop-simulator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setting-up-scheme-adapter-with-mojaloop-simulator"}},[e._v("#")]),e._v(" Setting up Scheme Adapter with Mojaloop Simulator")]),e._v(" "),a("p",[e._v("Please download the Mojaloop Simulator repo")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("git clone https://github.com/mojaloop/mojaloop-simulator.git\n")])])]),a("ul",[a("li",[a("p",[e._v("Replace the certificates and keys in src/secrets folder with the generated certificates in the previous step.")])]),e._v(" "),a("li",[a("p",[e._v("Edit the file src/docker-compose.yml and change the required parameters. Please refer the following file.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('version: \'3\'\nservices:\n  redis:\n    image: "redis:5.0.4-alpine"\n    container_name: redis\n  backend:\n    image: "mojaloop/mojaloop-simulator-backend"\n    env_file: ./sim-backend.env\n    container_name: ml_simulator\n    ports:\n      - "3000:3000"\n      - "3001:3001"\n      - "3003:3003"\n    depends_on:\n      - scheme-adapter\n\n  scheme-adapter:\n    image: "mojaloop/sdk-scheme-adapter:latest"\n    env_file: ./scheme-adapter.env\n    container_name: sa_sim2\n    volumes:\n      - ./secrets:/src/secrets\n    ports:\n      - "3500:3000"\n      - "4000:4000"\n    depends_on:\n      - redis\n')])])])]),e._v(" "),a("li",[a("p",[e._v("Edit the file src/sim-backend.env file and change the container name of the scheme adapter in that. Please refer the following lines.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("OUTBOUND_ENDPOINT=http://src_scheme-adapter_1:4001\nDFSP_ID=extpayerfsp\n")])])])]),e._v(" "),a("li",[a("p",[e._v("Edit the file src/scheme-adapter.env and change the following settings")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("MUTUAL_TLS_ENABLED=true\nCACHE_HOST=redis\nDFSP_ID=extpayerfsp\nBACKEND_ENDPOINT=ml_simulator:3000\nPEER_ENDPOINT=<Your WSO2 api url>\nAUTO_ACCEPT_QUOTES=true\n")])])])])]),e._v(" "),a("p",[e._v("Then try running the following command to run the services")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("cd src/\ndocker-compose up -d\n")])])]),a("p",[e._v("We can now access the mojaloop simulator's test api on 3003.")]),e._v(" "),a("h2",{attrs:{id:"provision-a-new-dfsp-extpayerfsp-with-proper-endpoints"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#provision-a-new-dfsp-extpayerfsp-with-proper-endpoints"}},[e._v("#")]),e._v(' Provision a new DFSP "extpayerfsp" with proper endpoints')]),e._v(" "),a("p",[e._v('We should create a new fsp named "extpayerfp" or with any other name.')]),e._v(" "),a("p",[e._v('The FSP onboarding section in "OSS-New-Deployment-FSP-Setup" postman collection can be used for this. You can get the postman repo from https://github.com/mojaloop/postman.')]),e._v(" "),a("ul",[a("li",[e._v('Duplicate the "Mojaloop-Local" environment and change the following valuesin that\n'),a("ul",[a("li",[e._v("payerfsp - extpayerfsp")]),e._v(" "),a("li",[e._v("HOST_ML_API_ADAPTER, HOST_ML_API, HOST_SWITCH_TRANSFERS, HOST_ACCOUNT_LOOKUP_SERVICE, HOST_QUOTING_SERVICE - Your WSO2 FSPIOP API endpoint")]),e._v(" "),a("li",[e._v("HOST_CENTRAL_LEDGER - Your WSO2 Central Services Admin API endpoint")]),e._v(" "),a("li",[e._v("HOST_CENTRAL_SETTLEMENT - Your WSO2 Central Settlement API endpoint (optional for our testing)")]),e._v(" "),a("li",[e._v("HOST_SIMULATOR & HOST_SIMULATOR_K8S_CLUSTER - https://<your_domain_name>:4000")])])]),e._v(" "),a("li",[e._v('Change the URLs in payerfsp onboarding in "FSP Onboarding" section of "OSS-New-Deployment-FSP-Setup" from "payerfsp" to "extpayerfsp"')]),e._v(" "),a("li",[e._v('Change the authentication as "Bearer Token" and provide the access token we created in WSO2 store for the entire "Payer FSP Onboarding" folder.')]),e._v(" "),a("li",[e._v("Change the endpoint URLs to the https endpoints provided by your infra team.")]),e._v(" "),a("li",[e._v('Then run the "Payer FSP Onboarding" folder in that collection with the newly created environment.')])]),e._v(" "),a("p",[e._v("You should get 100% pass then we can confirm that the fsp is created and endpoints are set for the fsp.")]),e._v(" "),a("h2",{attrs:{id:"provision-payeefsp-and-register-a-participant-against-msisdn-simulator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#provision-payeefsp-and-register-a-participant-against-msisdn-simulator"}},[e._v("#")]),e._v(" Provision payeefsp and register a participant against MSISDN simulator")]),e._v(" "),a("p",[e._v("Generally the simulator running in the switch contains payeefsp and you should register a new participant (phone number) of your choice.")]),e._v(" "),a("p",[e._v('You can refer the postman request "p2p_happy_path SEND QUOTE / Register Participant '+e._s(e.pathfinderMSISDN)+' against MSISDN Simulator for PayeeFSP" in "Golden_Path" collection to achieve this.')]),e._v(" "),a("p",[e._v("The postman request will send a POST request to <HOST_ACCOUNT_LOOKUP_SERVICE>/participants/MSISDN/<new_phone_number> with the following body and required http headers.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('{\n    "fspId": "payeefsp",\n    "currency": "USD"\n}\n')])])]),a("h2",{attrs:{id:"send-money"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#send-money"}},[e._v("#")]),e._v(" Send money")]),e._v(" "),a("h3",{attrs:{id:"in-one-step"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#in-one-step"}},[e._v("#")]),e._v(" In one step")]),e._v(" "),a("p",[e._v('If you want to send the money in one step, the configuration options "AUTO_ACCEPT_QUOTES" & "AUTO_ACCEPT_PARTY" in "scheme_adapter.env" should be enabled.')]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('curl -X POST \\\n  "http://localhost:3003/scenarios" \\\n  -H \'Content-Type: application/json\' \\\n  -d \'[\n    {\n        "name": "scenario1",\n        "operation": "postTransfers",\n        "body": {\n            "from": {\n                "displayName": "From some person name",\n                "idType": "MSISDN",\n                "idValue": "44123456789"\n            },\n            "to": {\n                "idType": "MSISDN",\n                "idValue": "919848123456"\n            },\n            "amountType": "SEND",\n            "currency": "USD",\n            "amount": "100",\n            "transactionType": "TRANSFER",\n            "note": "testpayment",\n            "homeTransactionId": "123ABC"\n        }\n    }\n]\'\n\n')])])]),a("h3",{attrs:{id:"in-two-steps"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#in-two-steps"}},[e._v("#")]),e._v(" In two steps")]),e._v(" "),a("p",[e._v("The following command is used to send the money in two steps (i.e Requesting the quote first, accept after review the charges and party details)")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('curl -X POST \\\n  "http://localhost:3003/scenarios" \\\n  -H \'Content-Type: application/json\' \\\n  -d \'[\n    {\n        "name": "scenario1",\n        "operation": "postTransfers",\n        "body": {\n            "from": {\n                "displayName": "From some person name",\n                "idType": "MSISDN",\n                "idValue": "44123456789"\n            },\n            "to": {\n                "idType": "MSISDN",\n                "idValue": "9848123456"\n            },\n            "amountType": "SEND",\n            "currency": "USD",\n            "amount": "100",\n            "transactionType": "TRANSFER",\n            "note": "testpayment",\n            "homeTransactionId": "123ABC"\n        }\n    },\n    {\n        "name": "scenario2",\n        "operation": "putTransfers",\n        "params": {\n            "transferId": "{{scenario1.result.transferId}}"\n        },\n        "body": {\n            "acceptQuote": true\n        }\n    }\n]\'\n\n')])])])])}),[],!1,null,null,null);t.default=s.exports}}]);