(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{436:function(t,e,o){"use strict";o.r(e);var a=o(43),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,o=t._self._c||e;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("h1",{attrs:{id:"creating-new-features"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#creating-new-features"}},[t._v("#")]),t._v(" Creating new Features")]),t._v(" "),o("h3",{attrs:{id:"fork"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#fork"}},[t._v("#")]),t._v(" Fork")]),t._v(" "),o("p",[t._v("Fork the Mojaloop repository into your own personal space. Ensure that you keep the "),o("code",[t._v("master")]),t._v(" branch in sync.")]),t._v(" "),o("p",[t._v("Refer to the following documentation for more information: "),o("a",{attrs:{href:"https://help.github.com/articles/fork-a-repo/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://help.github.com/articles/fork-a-repo/"),o("OutboundLink")],1)]),t._v(" "),o("ol",[o("li",[o("p",[t._v("Clone repo using Git Fork button (refer to the above documentation for more information)")])]),t._v(" "),o("li",[o("p",[t._v("Clone your forked repo: "),o("code",[t._v("git clone https://github.com/<your_username>/<forked_repo>.git")])])]),t._v(" "),o("li",[o("p",[t._v("Synchronise your forked repo with Mojaloop")]),t._v(" "),o("p",[t._v("Add a new upstream repo for Mojaloop "),o("code",[t._v("$ git remote add mojaloop https://github.com/mojaloop/<original_repo>.git")])]),t._v(" "),o("p",[t._v("You should now see that you have two remotes:")]),t._v(" "),o("div",{staticClass:"language-bash extra-class"},[o("pre",{pre:!0,attrs:{class:"language-bash"}},[o("code",[t._v(" "),o("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote -v\n origin    https://github.com/"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("your_username"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("/"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("forked_repo"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(".git "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fetch"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n origin    https://github.com/"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("your_username"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("/"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("forked_repo"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(".git "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("push"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n mojaloop  https://github.com/mojaloop/"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("original_repo"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(".git "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fetch"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n mojaloop  https://github.com/mojaloop/"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("original_repo"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(".git "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("push"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),o("li",[o("p",[t._v("To sync to your current branch: "),o("code",[t._v("git pull mojaloop <current_branch>")]),t._v(" This will merge any changes from Mojaloop's repo into your forked repo.")])]),t._v(" "),o("li",[o("p",[t._v("Push the changes back to your remote fork: "),o("code",[t._v("git push origin <current_branch>")])])])]),t._v(" "),o("h3",{attrs:{id:"creating-a-branch"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#creating-a-branch"}},[t._v("#")]),t._v(" Creating a Branch")]),t._v(" "),o("p",[t._v("Create a new branch from the "),o("code",[t._v("master")]),t._v(" branch with the following format: "),o("code",[t._v("<branchType>/<issue#><issueDescription>")]),t._v(" where "),o("code",[t._v("issue#")]),t._v(" can be attained from the Github issue, and the "),o("code",[t._v("issueDescription")]),t._v(" is the issue description formatted in CamelCase.")]),t._v(" "),o("ol",[o("li",[t._v("Create and checkout the branch: "),o("code",[t._v("git checkout -b <branchType>/<issue#><issueDescription>")])]),t._v(" "),o("li",[t._v("Push the branch to your remote: "),o("code",[t._v("git push origin <branchType>/<issue#><issueDescription>")])])]),t._v(" "),o("p",[t._v("Where "),o("code",[t._v("<branchType>")]),t._v(" can be one of the following:")]),t._v(" "),o("table",[o("thead",[o("tr",[o("th",{staticStyle:{"text-align":"left"}},[t._v("branchType")]),t._v(" "),o("th",{staticStyle:{"text-align":"left"}},[t._v("Description")])])]),t._v(" "),o("tbody",[o("tr",[o("td",{staticStyle:{"text-align":"left"}},[t._v("feature")]),t._v(" "),o("td",{staticStyle:{"text-align":"left"}},[t._v("Any new or maintenance features that are in active development.")])]),t._v(" "),o("tr",[o("td",{staticStyle:{"text-align":"left"}},[t._v("hotfix")]),t._v(" "),o("td",{staticStyle:{"text-align":"left"}},[t._v("A hotfix branch is for any urgent fixes.")])]),t._v(" "),o("tr",[o("td",{staticStyle:{"text-align":"left"}},[t._v("release")]),t._v(" "),o("td",{staticStyle:{"text-align":"left"}},[t._v("A release branch containing a snapshot of a release.")])]),t._v(" "),o("tr",[o("td",{staticStyle:{"text-align":"left"}},[t._v("backup")]),t._v(" "),o("td",{staticStyle:{"text-align":"left"}},[t._v("A temporary backup branch. Used normally during repo maintenance.")])])])]),t._v(" "),o("h3",{attrs:{id:"merge-into-mojaloop-repo"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#merge-into-mojaloop-repo"}},[t._v("#")]),t._v(" Merge into Mojaloop Repo")]),t._v(" "),o("p",[t._v("Once the feature is completed create a PR from your Feature Branch into the "),o("code",[t._v("master")]),t._v(" branch on the Mojaloop repository (not your personal repo) for approval, and check validations (e.g. unit tests, code coverage, etc executed via CircieCI).")])])}),[],!1,null,null,null);e.default=r.exports}}]);